# Multi-Stage Dockerfile for NEXUS Frontend
# Supports development, staging, and production environments

# Build arguments
ARG NODE_VERSION=18
ARG BUILD_ENV=production

# =============================================================================
# Stage 1: Base Node Environment
# =============================================================================
FROM node:${NODE_VERSION}-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/web/package*.json ./

# Install dependencies
RUN npm ci --frozen-lockfile

# =============================================================================
# Stage 2: Development Environment
# =============================================================================
FROM base AS development

# Copy source code
COPY frontend/web/ ./

# Install development dependencies
RUN npm install --save-dev

# Create non-root user
RUN addgroup -g 101 -S nginx 2>/dev/null || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true

# Create directories
RUN mkdir -p /app/logs /app/data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Expose port
EXPOSE 3000

# Development command with hot reload
CMD ["npm", "start"]

# =============================================================================
# Stage 3: Staging Environment
# =============================================================================
FROM base AS staging

# Copy source code
COPY frontend/web/ ./

# Build application
RUN npm run build

# Install production dependencies only
RUN npm ci --only=production && npm cache clean --force

# Create non-root user
RUN addgroup -g 101 -S nginx 2>/dev/null || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true

# Create directories
RUN mkdir -p /app/logs /app/data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Expose port
EXPOSE 80

# Staging command
CMD ["npm", "run", "serve"]

# =============================================================================
# Stage 4: Production Environment
# =============================================================================
FROM nginx:1.25-alpine AS production

# Install additional tools
RUN apk add --no-cache \
    wget \
    tini \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 101 -S nginx 2>/dev/null || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true

# Set working directory
WORKDIR /app

# Copy built application from staging
COPY --from=staging /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx/frontend.ultimate.conf /etc/nginx/conf.d/default.conf

# Create directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /var/run && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Expose port
EXPOSE 80

# Use tini as init system
ENTRYPOINT ["tini", "--"]

# Production command
CMD ["nginx", "-g", "daemon off;"]
