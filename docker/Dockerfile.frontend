# NEXUS Platform - Frontend Dockerfile
# Development and production builds

# Development stage
FROM node:18-alpine AS development

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/web/package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm install

# Copy source code
COPY frontend/web/ ./

# Expose port for development server
EXPOSE 3000

# Start development server
CMD ["npm", "start"]

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/web/package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY frontend/web/ ./

# Build the application
ENV TSC_COMPILE_ON_ERROR=true
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Copy built assets from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nginx 2>/dev/null || true && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true

# Set proper permissions
RUN chown -R root:root /usr/share/nginx/html && \
    chown -R root:root /var/cache/nginx && \
    chown -R root:root /var/log/nginx && \
    chown -R root:root /etc/nginx/conf.d

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
