# Multi-Stage Dockerfile for NEXUS Backend
# Supports development, staging, and production environments

# Build arguments
ARG PYTHON_VERSION=3.11
ARG BUILD_ENV=production

# =============================================================================
# Stage 1: Base Python Environment
# =============================================================================
FROM python:${PYTHON_VERSION}-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    gcc \
    g++ \
    libc-dev \
    libffi-dev \
    libpq-dev \
    musl-dev \
    openssl-dev \
    curl \
    git \
    make \
    && rm -rf /var/cache/apk/*

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DEFAULT_RETRIES=3 \
    GIT_PYTHON_REFRESH=quiet

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies
COPY backend/requirements.txt /tmp/requirements.txt
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# =============================================================================
# Stage 2: Development Environment
# =============================================================================
FROM base AS development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    isort \
    flake8 \
    mypy \
    ipython \
    jupyter

# Install runtime dependencies
RUN apk add --no-cache \
    libpq \
    curl \
    tini \
    wget \
    ca-certificates \
    git \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 nexus && \
    adduser -D -s /bin/sh -u 1000 -G nexus nexus

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=nexus:nexus backend/ ./backend/
COPY --chown=nexus:nexus config/ ./config/
COPY --chown=nexus:nexus scripts/ ./scripts/

# Create directories and set permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R nexus:nexus /app && \
    chmod +x scripts/*.py 2>/dev/null || true

# Switch to non-root user
USER nexus

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use tini as init system
ENTRYPOINT ["tini", "--"]

# Development command with hot reload
CMD ["python", "-m", "uvicorn", "backend.main_unified:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--reload-dir", "/app/backend", \
     "--log-level", "debug"]

# =============================================================================
# Stage 3: Staging Environment
# =============================================================================
FROM base AS staging

# Install runtime dependencies
RUN apk add --no-cache \
    libpq \
    curl \
    tini \
    wget \
    ca-certificates \
    git \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 nexus && \
    adduser -D -s /bin/sh -u 1000 -G nexus nexus

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=nexus:nexus backend/ ./backend/
COPY --chown=nexus:nexus config/ ./config/
COPY --chown=nexus:nexus scripts/ ./scripts/

# Create directories and set permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R nexus:nexus /app && \
    chmod +x scripts/*.py 2>/dev/null || true

# Switch to non-root user
USER nexus

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use tini as init system
ENTRYPOINT ["tini", "--"]

# Staging command
CMD ["python", "-m", "uvicorn", "backend.main_unified:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "2", \
     "--access-log", \
     "--log-level", "info"]

# =============================================================================
# Stage 4: Production Environment
# =============================================================================
FROM base AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    libpq \
    curl \
    tini \
    wget \
    ca-certificates \
    git \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 nexus && \
    adduser -D -s /bin/sh -u 1000 -G nexus nexus

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=nexus:nexus backend/ ./backend/
COPY --chown=nexus:nexus config/ ./config/
COPY --chown=nexus:nexus scripts/ ./scripts/

# Create directories and set permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R nexus:nexus /app && \
    chmod +x scripts/*.py 2>/dev/null || true

# Switch to non-root user
USER nexus

# Health check with tier-3 error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use tini as init system for proper signal handling
ENTRYPOINT ["tini", "--"]

# Production command with optimizations
CMD ["python", "-m", "uvicorn", "backend.main_unified:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--access-log", \
     "--log-level", "info"]
