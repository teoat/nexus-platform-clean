name: NEXUS Platform Production CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run code quality checks
        run: |
          poetry run black --check backend/
          poetry run isort --check-only backend/
          poetry run flake8 backend/
          poetry run mypy backend/

      - name: Check for security vulnerabilities
        run: |
          poetry run safety check
          poetry run bandit -r backend/ -f json -o bandit-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: bandit-report.json

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nexus_test

      - name: Run backend tests
        run: |
          poetry run pytest backend/ --cov=backend --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nexus_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/web

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/web/build

  # E2E Tests
  e2e-test:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        working-directory: ./e2e-tests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: e2e-tests/test-results/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "./k8s/"
          format: "sarif"
          output: "k8s-trivy-results.sarif"

  # Build and Push Docker Images
  build-and-push:
    needs: [code-quality, backend-test, frontend-test, e2e-test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push unified backend
      - name: Build and push unified backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend/Dockerfile.unified
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build and push frontend
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/web
          file: docker/frontend/Dockerfile.production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push nginx
      - name: Build and push nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          file: docker/nginx/Dockerfile.production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Infrastructure Tests
  infrastructure-test:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./infrastructure/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure/terraform

      - name: Check Kubernetes manifests
        run: |
          kubeconform -kubernetes-version 1.27.0 k8s/production-manifests.yaml

  # Deploy to Staging
  deploy-staging:
    needs: [build-and-push, infrastructure-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBE_CONFIG }}

      - name: Deploy to staging
        run: |
          # Update image tags in k8s manifests
          sed -i 's|nexus-backend:latest|nexus-backend:develop-${{ github.sha }}|g' k8s/production-manifests.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/production-manifests.yaml

          # Wait for rollout
          kubectl rollout status deployment/nexus-backend -n nexus-production --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30

          # Run basic health checks
          curl -f http://staging-api.nexus-platform.com/health || exit 1

  # Deploy to Production
  deploy-production:
    needs: [build-and-push, infrastructure-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBE_CONFIG }}

      - name: Run pre-deployment checks
        run: |
          # Validate database schema
          python scripts/validate_database_schema.py

          # Check for any active incidents
          python scripts/check_system_health.py

      - name: Deploy to production
        run: |
          # Update image tags in k8s manifests
          sed -i 's|nexus-backend:latest|nexus-backend:main-${{ github.sha }}|g' k8s/production-manifests.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/production-manifests.yaml

          # Wait for rollout
          kubectl rollout status deployment/nexus-backend -n nexus-production --timeout=900s

      - name: Run post-deployment tests
        run: |
          # Wait for services to be ready
          sleep 60

          # Run comprehensive health checks
          python scripts/run_production_tests.py

      - name: Create deployment notification
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{"text":"🚀 NEXUS Platform deployed to production successfully!"}'

      - name: Create deployment notification on failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{"text":"❌ NEXUS Platform production deployment failed!"}'

  # Rollback Plan
  rollback:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBE_CONFIG }}

      - name: Rollback deployment
        run: |
          # Rollback to previous version
          kubectl rollout undo deployment/nexus-backend -n nexus-production

          # Wait for rollback to complete
          kubectl rollout status deployment/nexus-backend -n nexus-production --timeout=600s

      - name: Notify rollback
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{"text":"🔄 NEXUS Platform rolled back to previous version due to deployment failure"}'
