name: Production Build & Dependency Management

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1" # Weekly dependency updates

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  # Frontend Build & Security
  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated || true

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build production bundle
        run: npm run build

      - name: Analyze bundle size
        run: npm run analyze || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/web/build/

  # Backend Build & Security
  backend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-production.txt

      - name: Check for dependency conflicts
        run: pip check

      - name: Security scan
        run: |
          pip install safety
          safety check

      - name: Run tests
        run: |
          pip install pytest pytest-cov
          pytest --cov=backend tests/ || true

      - name: Lint code
        run: |
          pip install flake8 black
          flake8 backend/ || true
          black --check backend/ || true

  # Docker Build & Security
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: false
          tags: nexus-platform:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "nexus-platform:production"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update frontend dependencies
        run: |
          cd frontend/web
          npm update
          npm audit fix
          if [ -n "$(git status --porcelain)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add package*.json
            git commit -m "chore: update frontend dependencies"
            git push
          fi

      - name: Update Python dependencies
        run: |
          pip install --upgrade pip
          pip install pip-tools
          pip-compile requirements-production.txt --upgrade
          if [ -n "$(git status --porcelain)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add requirements-production.txt
            git commit -m "chore: update Python dependencies"
            git push
          fi

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose -f docker-compose.production.yml up -d
          sleep 30

      - name: Run load tests
        run: |
          pip install locust
          locust --headless -u 100 -r 10 -t 60s --host http://localhost:8000 || true

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.production.yml down -v

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, docker-build]
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/
          # Example: docker-compose -f docker-compose.production.yml up -d
