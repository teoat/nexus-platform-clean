# Consolidated K8S
# Consolidated from: kubernetes_deployment.yaml, enhanced_ports.yml, security_policies.yml, ports.yml, security_policies.yml, prometheus.yml, ports.yml, prometheus.yml, kubernetes_deployment.yaml, monitoring_config.yml, ports.yml, security_policies.yml, kubernetes_deployment.yaml, jaeger.yml, ports.yml, prometheus.yml, kubernetes_deployment.yaml, database_schema.yml, monitoring_config.yml, security_policies.yml, prometheus.yml, security_policies.yml, enhanced_ports.yml, elasticsearch.yml, monitoring_config.yml, deployment_config.yml, monitoring_config.yml, deployment_config.yml, kubernetes_deployment.yaml, kubernetes_deployment.yaml, deployment_config.yml, elasticsearch.yml, monitoring_config.yml, database_schema.yml, elasticsearch.yml, security_policies.yml, deployment_config.yml, enhanced_ports.yml, deployment_config.yml, kubernetes_deployment.yaml, enhanced_ports.yml, database_schema.yml, jaeger.yml, database_schema.yml, deployment_config.yml, prometheus.yml, ports.yml, elasticsearch.yml, ports.yml, jaeger.yml, enhanced_ports.yml, security_policies.yml, jaeger.yml, database_schema.yml, elasticsearch.yml, prometheus.yml, deployment_config.yml, prometheus.yml, elasticsearch.yml, kubernetes_deployment.yaml, monitoring_config.yml, jaeger.yml, monitoring_config.yml, monitoring_config.yml, jaeger.yml, deployment_config.yml, jaeger.yml, enhanced_ports.yml, ports.yml
# Generated: 2025-09-19 07:01:56.807933

# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== enhanced_ports.yml =====

enhancements:
  automation:
    auto_scaling: true
    backup: true
    deployment: true
    service_discovery: true
  monitoring:
    alerting: true
    logging: true
    metrics: true
    tracing: true
  performance:
    caching: true
    compression: true
    connection_pooling: true
    load_balancing: true
  security:
    audit_logging: true
    authentication: true
    https: true
    rate_limiting: true
metadata:
  enhancements_count: 31
  last_updated: '2025-09-16T01:43:36.665168'
  status: enhanced
  total_services: 32
  version: '2.0'
ports:
  audit_service: 4500
  auth_service: 2000
  backup_recovery: 3900
  cdn_service: 4300
  consul: 3000
  db_migration: 3800
  disaster_recovery: 4100
  elasticsearch: 2200
  enhanced_load_balancer: 3700
  enhanced_prometheus: 1900
  environment_manager: 4000
  grafana: 1000
  jaeger: 2400
  kibana: 2300
  kong_gateway: 3100
  load_balancer: 2100
  logstash: 3400
  nags_api: 1400
  nags_dashboard: 1600
  nags_metrics: 1700
  nags_websocket: 1500
  nginx: 1300
  oauth2_jwt: 3500
  performance_optimizer: 4200
  postgresql: 1100
  prometheus: 3300
  rabbitmq: 2600
  redis: 1200
  redis_cache_optimizer: 1800
  security_hardening: 4400
  security_scanner: 3600
  vault: 3200


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379

# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379

# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379

# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== enhanced_ports.yml =====

enhancements:
  automation:
    auto_scaling: true
    backup: true
    deployment: true
    service_discovery: true
  monitoring:
    alerting: true
    logging: true
    metrics: true
    tracing: true
  performance:
    caching: true
    compression: true
    connection_pooling: true
    load_balancing: true
  security:
    audit_logging: true
    authentication: true
    https: true
    rate_limiting: true
metadata:
  enhancements_count: 31
  last_updated: '2025-09-16T01:43:36.665168'
  status: enhanced
  total_services: 32
  version: '2.0'
ports:
  audit_service: 4500
  auth_service: 2000
  backup_recovery: 3900
  cdn_service: 4300
  consul: 3000
  db_migration: 3800
  disaster_recovery: 4100
  elasticsearch: 2200
  enhanced_load_balancer: 3700
  enhanced_prometheus: 1900
  environment_manager: 4000
  grafana: 1000
  jaeger: 2400
  kibana: 2300
  kong_gateway: 3100
  load_balancer: 2100
  logstash: 3400
  nags_api: 1400
  nags_dashboard: 1600
  nags_metrics: 1700
  nags_websocket: 1500
  nginx: 1300
  oauth2_jwt: 3500
  performance_optimizer: 4200
  postgresql: 1100
  prometheus: 3300
  rabbitmq: 2600
  redis: 1200
  redis_cache_optimizer: 1800
  security_hardening: 4400
  security_scanner: 3600
  vault: 3200


# ===== elasticsearch.yml =====

cluster.name: nexus-cluster
discovery.type: single-node
network.host: 0.0.0.0
node.name: nexus-node-1
xpack.monitoring.collection.enabled: true
xpack.security.enabled: false


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== elasticsearch.yml =====

cluster.name: nexus-cluster
discovery.type: single-node
network.host: 0.0.0.0
node.name: nexus-node-1
xpack.monitoring.collection.enabled: true
xpack.security.enabled: false


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== database_schema.yml =====

# NEXUS Platform Database Schema - Single Source of Truth
# Last Updated: 2025-01-15 23:25:00
# Version: 1.0.0

database:
  name: tools/utilities/tools/utilities/nexus_platform
  version: "15"
  encoding: "UTF8"
  collation: "en_US.UTF-8"

tables:
  users:
    description: "User accounts and authentication"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      username:
        type: "VARCHAR(50)"
        unique: true
        not_null: true
      email:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      password_hash:
        type: "VARCHAR(255)"
        not_null: true
      role:
        type: "VARCHAR(50)"
        not_null: true
        default: "user"
        check: "role IN ('admin', 'user', 'auditor', 'investigator')"
      is_active:
        type: "BOOLEAN"
        not_null: true
        default: true
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_users_username"
        columns: ["username"]
      - name: "idx_users_email"
        columns: ["email"]
      - name: "idx_users_role"
        columns: ["role"]

  agents:
    description: "AI agents and automation systems"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      agent_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      agent_type:
        type: "VARCHAR(100)"
        not_null: true
      status:
        type: "VARCHAR(50)"
        not_null: true
        default: "inactive"
        check: "status IN ('active', 'inactive', 'error', 'maintenance')"
      capabilities:
        type: "JSONB"
        not_null: true
        default: "[]"
      metadata:
        type: "JSONB"
        not_null: true
        default: "{}"
      last_activity:
        type: "TIMESTAMP WITH TIME ZONE"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_agents_agent_id"
        columns: ["agent_id"]
      - name: "idx_agents_status"
        columns: ["status"]
      - name: "idx_agents_type"
        columns: ["agent_type"]

  tasks:
    description: "Task management and tracking"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      task_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      description:
        type: "TEXT"
      priority:
        type: "VARCHAR(20)"
        not_null: true
        default: "medium"
        check: "priority IN ('critical', 'high', 'medium', 'low')"
      status:
        type: "VARCHAR(20)"
        not_null: true
        default: "pending"
        check: "status IN ('pending', 'in_progress', 'completed', 'failed', 'cancelled')"
      assigned_agent:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      dependencies:
        type: "JSONB"
        not_null: true
        default: "[]"
      progress:
        type: "INTEGER"
        not_null: true
        default: 0
        check: "progress >= 0 AND progress <= 100"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      completed_at:
        type: "TIMESTAMP WITH TIME ZONE"
    indexes:
      - name: "idx_tasks_task_id"
        columns: ["task_id"]
      - name: "idx_tasks_status"
        columns: ["status"]
      - name: "idx_tasks_priority"
        columns: ["priority"]
      - name: "idx_tasks_assigned_agent"
        columns: ["assigned_agent"]

  system_logs:
    description: "System events and audit logs"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      level:
        type: "VARCHAR(20)"
        not_null: true
        check: "level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')"
      component:
        type: "VARCHAR(100)"
        not_null: true
      message:
        type: "TEXT"
        not_null: true
      context:
        type: "JSONB"
        not_null: true
        default: "{}"
      user_id:
        type: "UUID"
        references: "users(id)"
      agent_id:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_system_logs_level"
        columns: ["level"]
      - name: "idx_system_logs_component"
        columns: ["component"]
      - name: "idx_system_logs_created_at"
        columns: ["created_at"]

  configurations:
    description: "System configuration values"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      config_key:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      config_value:
        type: "TEXT"
        not_null: true
      config_type:
        type: "VARCHAR(50)"
        not_null: true
        default: "string"
        check: "config_type IN ('string', 'integer', 'boolean', 'json', 'yaml')"
      description:
        type: "TEXT"
      is_encrypted:
        type: "BOOLEAN"
        not_null: true
        default: false
      is_system:
        type: "BOOLEAN"
        not_null: true
        default: false
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_configurations_key"
        columns: ["config_key"]
      - name: "idx_configurations_type"
        columns: ["config_type"]
      - name: "idx_configurations_system"
        columns: ["is_system"]

# Database constraints and relationships
constraints:
  foreign_keys:
    - table: "tasks"
      column: "assigned_agent"
      references: "agents(agent_id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "user_id"
      references: "users(id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "agent_id"
      references: "agents(agent_id)"
      on_delete: "SET NULL"

# Database triggers
triggers:
  - name: "update_updated_at_column"
    table: "users"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "agents"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "tasks"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "configurations"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]

# Database functions
functions:
  - name: "update_updated_at_column"
    language: "plpgsql"
    body: |
      BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
      END;

# Database views
views:
  active_agents:
    description: "View of currently active agents"
    query: |
      SELECT * FROM agents WHERE status = 'active'

  pending_tasks:
    description: "View of pending tasks"
    query: |
      SELECT * FROM tasks WHERE status = 'pending'

  system_health:
    description: "View of system health metrics"
    query: |
      SELECT
        (SELECT COUNT(*) FROM agents WHERE status = 'active') as active_agents,
        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks,
        (SELECT COUNT(*) FROM system_logs WHERE created_at > NOW() - INTERVAL '1 hour') as recent_logs

# Database policies (Row Level Security)
policies:
  users:
    - name: "Users can view their own data"
      command: "SELECT"
      roles: ["authenticated"]
      using: "auth.uid() = id"

  system_logs:
    - name: "System logs are readable by authenticated users"
      command: "SELECT"
      roles: ["authenticated"]
      using: "true"


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== enhanced_ports.yml =====

enhancements:
  automation:
    auto_scaling: true
    backup: true
    deployment: true
    service_discovery: true
  monitoring:
    alerting: true
    logging: true
    metrics: true
    tracing: true
  performance:
    caching: true
    compression: true
    connection_pooling: true
    load_balancing: true
  security:
    audit_logging: true
    authentication: true
    https: true
    rate_limiting: true
metadata:
  enhancements_count: 31
  last_updated: '2025-09-16T01:43:36.665168'
  status: enhanced
  total_services: 32
  version: '2.0'
ports:
  audit_service: 4500
  auth_service: 2000
  backup_recovery: 3900
  cdn_service: 4300
  consul: 3000
  db_migration: 3800
  disaster_recovery: 4100
  elasticsearch: 2200
  enhanced_load_balancer: 3700
  enhanced_prometheus: 1900
  environment_manager: 4000
  grafana: 1000
  jaeger: 2400
  kibana: 2300
  kong_gateway: 3100
  load_balancer: 2100
  logstash: 3400
  nags_api: 1400
  nags_dashboard: 1600
  nags_metrics: 1700
  nags_websocket: 1500
  nginx: 1300
  oauth2_jwt: 3500
  performance_optimizer: 4200
  postgresql: 1100
  prometheus: 3300
  rabbitmq: 2600
  redis: 1200
  redis_cache_optimizer: 1800
  security_hardening: 4400
  security_scanner: 3600
  vault: 3200


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== database_schema.yml =====

# NEXUS Platform Database Schema - Single Source of Truth
# Last Updated: 2025-01-15 23:25:00
# Version: 1.0.0

database:
  name: tools/utilities/tools/utilities/nexus_platform
  version: "15"
  encoding: "UTF8"
  collation: "en_US.UTF-8"

tables:
  users:
    description: "User accounts and authentication"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      username:
        type: "VARCHAR(50)"
        unique: true
        not_null: true
      email:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      password_hash:
        type: "VARCHAR(255)"
        not_null: true
      role:
        type: "VARCHAR(50)"
        not_null: true
        default: "user"
        check: "role IN ('admin', 'user', 'auditor', 'investigator')"
      is_active:
        type: "BOOLEAN"
        not_null: true
        default: true
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_users_username"
        columns: ["username"]
      - name: "idx_users_email"
        columns: ["email"]
      - name: "idx_users_role"
        columns: ["role"]

  agents:
    description: "AI agents and automation systems"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      agent_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      agent_type:
        type: "VARCHAR(100)"
        not_null: true
      status:
        type: "VARCHAR(50)"
        not_null: true
        default: "inactive"
        check: "status IN ('active', 'inactive', 'error', 'maintenance')"
      capabilities:
        type: "JSONB"
        not_null: true
        default: "[]"
      metadata:
        type: "JSONB"
        not_null: true
        default: "{}"
      last_activity:
        type: "TIMESTAMP WITH TIME ZONE"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_agents_agent_id"
        columns: ["agent_id"]
      - name: "idx_agents_status"
        columns: ["status"]
      - name: "idx_agents_type"
        columns: ["agent_type"]

  tasks:
    description: "Task management and tracking"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      task_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      description:
        type: "TEXT"
      priority:
        type: "VARCHAR(20)"
        not_null: true
        default: "medium"
        check: "priority IN ('critical', 'high', 'medium', 'low')"
      status:
        type: "VARCHAR(20)"
        not_null: true
        default: "pending"
        check: "status IN ('pending', 'in_progress', 'completed', 'failed', 'cancelled')"
      assigned_agent:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      dependencies:
        type: "JSONB"
        not_null: true
        default: "[]"
      progress:
        type: "INTEGER"
        not_null: true
        default: 0
        check: "progress >= 0 AND progress <= 100"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      completed_at:
        type: "TIMESTAMP WITH TIME ZONE"
    indexes:
      - name: "idx_tasks_task_id"
        columns: ["task_id"]
      - name: "idx_tasks_status"
        columns: ["status"]
      - name: "idx_tasks_priority"
        columns: ["priority"]
      - name: "idx_tasks_assigned_agent"
        columns: ["assigned_agent"]

  system_logs:
    description: "System events and audit logs"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      level:
        type: "VARCHAR(20)"
        not_null: true
        check: "level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')"
      component:
        type: "VARCHAR(100)"
        not_null: true
      message:
        type: "TEXT"
        not_null: true
      context:
        type: "JSONB"
        not_null: true
        default: "{}"
      user_id:
        type: "UUID"
        references: "users(id)"
      agent_id:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_system_logs_level"
        columns: ["level"]
      - name: "idx_system_logs_component"
        columns: ["component"]
      - name: "idx_system_logs_created_at"
        columns: ["created_at"]

  configurations:
    description: "System configuration values"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      config_key:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      config_value:
        type: "TEXT"
        not_null: true
      config_type:
        type: "VARCHAR(50)"
        not_null: true
        default: "string"
        check: "config_type IN ('string', 'integer', 'boolean', 'json', 'yaml')"
      description:
        type: "TEXT"
      is_encrypted:
        type: "BOOLEAN"
        not_null: true
        default: false
      is_system:
        type: "BOOLEAN"
        not_null: true
        default: false
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_configurations_key"
        columns: ["config_key"]
      - name: "idx_configurations_type"
        columns: ["config_type"]
      - name: "idx_configurations_system"
        columns: ["is_system"]

# Database constraints and relationships
constraints:
  foreign_keys:
    - table: "tasks"
      column: "assigned_agent"
      references: "agents(agent_id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "user_id"
      references: "users(id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "agent_id"
      references: "agents(agent_id)"
      on_delete: "SET NULL"

# Database triggers
triggers:
  - name: "update_updated_at_column"
    table: "users"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "agents"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "tasks"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "configurations"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]

# Database functions
functions:
  - name: "update_updated_at_column"
    language: "plpgsql"
    body: |
      BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
      END;

# Database views
views:
  active_agents:
    description: "View of currently active agents"
    query: |
      SELECT * FROM agents WHERE status = 'active'

  pending_tasks:
    description: "View of pending tasks"
    query: |
      SELECT * FROM tasks WHERE status = 'pending'

  system_health:
    description: "View of system health metrics"
    query: |
      SELECT
        (SELECT COUNT(*) FROM agents WHERE status = 'active') as active_agents,
        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks,
        (SELECT COUNT(*) FROM system_logs WHERE created_at > NOW() - INTERVAL '1 hour') as recent_logs

# Database policies (Row Level Security)
policies:
  users:
    - name: "Users can view their own data"
      command: "SELECT"
      roles: ["authenticated"]
      using: "auth.uid() = id"

  system_logs:
    - name: "System logs are readable by authenticated users"
      command: "SELECT"
      roles: ["authenticated"]
      using: "true"


# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== database_schema.yml =====

# NEXUS Platform Database Schema - Single Source of Truth
# Last Updated: 2025-01-15 23:25:00
# Version: 1.0.0

database:
  name: tools/utilities/tools/utilities/nexus_platform
  version: "15"
  encoding: "UTF8"
  collation: "en_US.UTF-8"

tables:
  users:
    description: "User accounts and authentication"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      username:
        type: "VARCHAR(50)"
        unique: true
        not_null: true
      email:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      password_hash:
        type: "VARCHAR(255)"
        not_null: true
      role:
        type: "VARCHAR(50)"
        not_null: true
        default: "user"
        check: "role IN ('admin', 'user', 'auditor', 'investigator')"
      is_active:
        type: "BOOLEAN"
        not_null: true
        default: true
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_users_username"
        columns: ["username"]
      - name: "idx_users_email"
        columns: ["email"]
      - name: "idx_users_role"
        columns: ["role"]

  agents:
    description: "AI agents and automation systems"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      agent_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      agent_type:
        type: "VARCHAR(100)"
        not_null: true
      status:
        type: "VARCHAR(50)"
        not_null: true
        default: "inactive"
        check: "status IN ('active', 'inactive', 'error', 'maintenance')"
      capabilities:
        type: "JSONB"
        not_null: true
        default: "[]"
      metadata:
        type: "JSONB"
        not_null: true
        default: "{}"
      last_activity:
        type: "TIMESTAMP WITH TIME ZONE"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_agents_agent_id"
        columns: ["agent_id"]
      - name: "idx_agents_status"
        columns: ["status"]
      - name: "idx_agents_type"
        columns: ["agent_type"]

  tasks:
    description: "Task management and tracking"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      task_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      description:
        type: "TEXT"
      priority:
        type: "VARCHAR(20)"
        not_null: true
        default: "medium"
        check: "priority IN ('critical', 'high', 'medium', 'low')"
      status:
        type: "VARCHAR(20)"
        not_null: true
        default: "pending"
        check: "status IN ('pending', 'in_progress', 'completed', 'failed', 'cancelled')"
      assigned_agent:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      dependencies:
        type: "JSONB"
        not_null: true
        default: "[]"
      progress:
        type: "INTEGER"
        not_null: true
        default: 0
        check: "progress >= 0 AND progress <= 100"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      completed_at:
        type: "TIMESTAMP WITH TIME ZONE"
    indexes:
      - name: "idx_tasks_task_id"
        columns: ["task_id"]
      - name: "idx_tasks_status"
        columns: ["status"]
      - name: "idx_tasks_priority"
        columns: ["priority"]
      - name: "idx_tasks_assigned_agent"
        columns: ["assigned_agent"]

  system_logs:
    description: "System events and audit logs"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      level:
        type: "VARCHAR(20)"
        not_null: true
        check: "level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')"
      component:
        type: "VARCHAR(100)"
        not_null: true
      message:
        type: "TEXT"
        not_null: true
      context:
        type: "JSONB"
        not_null: true
        default: "{}"
      user_id:
        type: "UUID"
        references: "users(id)"
      agent_id:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_system_logs_level"
        columns: ["level"]
      - name: "idx_system_logs_component"
        columns: ["component"]
      - name: "idx_system_logs_created_at"
        columns: ["created_at"]

  configurations:
    description: "System configuration values"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      config_key:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      config_value:
        type: "TEXT"
        not_null: true
      config_type:
        type: "VARCHAR(50)"
        not_null: true
        default: "string"
        check: "config_type IN ('string', 'integer', 'boolean', 'json', 'yaml')"
      description:
        type: "TEXT"
      is_encrypted:
        type: "BOOLEAN"
        not_null: true
        default: false
      is_system:
        type: "BOOLEAN"
        not_null: true
        default: false
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_configurations_key"
        columns: ["config_key"]
      - name: "idx_configurations_type"
        columns: ["config_type"]
      - name: "idx_configurations_system"
        columns: ["is_system"]

# Database constraints and relationships
constraints:
  foreign_keys:
    - table: "tasks"
      column: "assigned_agent"
      references: "agents(agent_id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "user_id"
      references: "users(id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "agent_id"
      references: "agents(agent_id)"
      on_delete: "SET NULL"

# Database triggers
triggers:
  - name: "update_updated_at_column"
    table: "users"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "agents"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "tasks"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "configurations"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]

# Database functions
functions:
  - name: "update_updated_at_column"
    language: "plpgsql"
    body: |
      BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
      END;

# Database views
views:
  active_agents:
    description: "View of currently active agents"
    query: |
      SELECT * FROM agents WHERE status = 'active'

  pending_tasks:
    description: "View of pending tasks"
    query: |
      SELECT * FROM tasks WHERE status = 'pending'

  system_health:
    description: "View of system health metrics"
    query: |
      SELECT
        (SELECT COUNT(*) FROM agents WHERE status = 'active') as active_agents,
        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks,
        (SELECT COUNT(*) FROM system_logs WHERE created_at > NOW() - INTERVAL '1 hour') as recent_logs

# Database policies (Row Level Security)
policies:
  users:
    - name: "Users can view their own data"
      command: "SELECT"
      roles: ["authenticated"]
      using: "auth.uid() = id"

  system_logs:
    - name: "System logs are readable by authenticated users"
      command: "SELECT"
      roles: ["authenticated"]
      using: "true"


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379

# ===== elasticsearch.yml =====

cluster.name: nexus-cluster
discovery.type: single-node
network.host: 0.0.0.0
node.name: nexus-node-1
xpack.monitoring.collection.enabled: true
xpack.security.enabled: false


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379

# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== enhanced_ports.yml =====

enhancements:
  automation:
    auto_scaling: true
    backup: true
    deployment: true
    service_discovery: true
  monitoring:
    alerting: true
    logging: true
    metrics: true
    tracing: true
  performance:
    caching: true
    compression: true
    connection_pooling: true
    load_balancing: true
  security:
    audit_logging: true
    authentication: true
    https: true
    rate_limiting: true
metadata:
  enhancements_count: 31
  last_updated: '2025-09-16T01:43:36.665168'
  status: enhanced
  total_services: 32
  version: '2.0'
ports:
  audit_service: 4500
  auth_service: 2000
  backup_recovery: 3900
  cdn_service: 4300
  consul: 3000
  db_migration: 3800
  disaster_recovery: 4100
  elasticsearch: 2200
  enhanced_load_balancer: 3700
  enhanced_prometheus: 1900
  environment_manager: 4000
  grafana: 1000
  jaeger: 2400
  kibana: 2300
  kong_gateway: 3100
  load_balancer: 2100
  logstash: 3400
  nags_api: 1400
  nags_dashboard: 1600
  nags_metrics: 1700
  nags_websocket: 1500
  nginx: 1300
  oauth2_jwt: 3500
  performance_optimizer: 4200
  postgresql: 1100
  prometheus: 3300
  rabbitmq: 2600
  redis: 1200
  redis_cache_optimizer: 1800
  security_hardening: 4400
  security_scanner: 3600
  vault: 3200


# ===== security_policies.yml =====

# NEXUS Platform Security Policies - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

security:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  compliance_standards: ["OWASP", "NIST", "ISO27001"]

# Authentication Policies
authentication:
  password_policy:
    min_length: 8
    max_length: 128
    require_uppercase: true
    require_lowercase: true
    require_numbers: true
    require_special_chars: true
    max_age_days: 90
    history_count: 5
    lockout_attempts: 5
    lockout_duration_minutes: 30

  session_policy:
    timeout_minutes: 30
    max_concurrent_sessions: 3
    require_reauth_sensitive: true
    session_encryption: true
    secure_cookies: true
    http_only_cookies: true
    same_site_policy: "strict"

  mfa_policy:
    enabled: true
    required_roles: ["admin", "auditor", "investigator"]
    methods: ["totp", "sms", "email"]
    backup_codes_count: 10
    grace_period_hours: 24

# Authorization Policies
authorization:
  role_based_access:
    admin:
      permissions:
        - "system:read"
        - "system:write"
        - "system:delete"
        - "users:read"
        - "users:write"
        - "users:delete"
        - "agents:read"
        - "agents:write"
        - "agents:delete"
        - "tasks:read"
        - "tasks:write"
        - "tasks:delete"
        - "config:read"
        - "config:write"
        - "logs:read"
      restrictions:
        - "Cannot delete own account"
        - "Cannot modify system critical configs without approval"

    auditor:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "logs:read"
        - "reports:read"
        - "reports:write"
      restrictions:
        - "Read-only access to sensitive data"
        - "Cannot modify system configurations"

    investigator:
      permissions:
        - "system:read"
        - "users:read"
        - "agents:read"
        - "tasks:read"
        - "tasks:write"
        - "logs:read"
        - "reports:read"
        - "reports:write"
        - "evidence:read"
        - "evidence:write"
      restrictions:
        - "Cannot modify user accounts"
        - "Cannot access system configurations"

    user:
      permissions:
        - "profile:read"
        - "profile:write"
        - "tasks:read"
        - "tasks:write"
      restrictions:
        - "Can only access own profile"
        - "Cannot access system data"

# Data Protection Policies
data_protection:
  encryption:
    at_rest:
      algorithm: "AES-256-GCM"
      key_rotation_days: 90
      key_management: "AWS KMS"
    in_transit:
      protocol: "TLS 1.3"
      cipher_suites: ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"]
      certificate_validation: true
    application_level:
      sensitive_fields: ["password", "ssn", "credit_card", "api_key"]
      encryption_algorithm: "AES-256-CBC"

  data_classification:
    public:
      description: "Publicly accessible data"
      encryption_required: false
      retention_days: 365
    internal:
      description: "Internal use only"
      encryption_required: true
      retention_days: 2555  # 7 years
    confidential:
      description: "Confidential business data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
    restricted:
      description: "Highly sensitive data"
      encryption_required: true
      retention_days: 2555
      access_logging: true
      mfa_required: true

# Network Security Policies
network_security:
  firewall_rules:
    - name: "Allow HTTPS"
      port: 443
      protocol: "TCP"
      source: "0.0.0.0/0"
      action: "ALLOW"
    - name: "Allow API"
      port: 3100
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Allow Operations"
      port: 3200
      protocol: "TCP"
      source: "10.0.0.0/8"
      action: "ALLOW"
    - name: "Deny All Other"
      port: "ALL"
      protocol: "ALL"
      source: "0.0.0.0/0"
      action: "DENY"

  cors_policy:
    allowed_origins:
      - "http://localhost:2100"
      - "http://localhost:2400"
      - "http://localhost:2200"
      - "http://localhost:2300"
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Authorization", "Content-Type", "X-Requested-With"]
    allow_credentials: true
    max_age_seconds: 3600

# API Security Policies
api_security:
  rate_limiting:
    default:
      requests_per_minute: 100
      burst_limit: 200
      window_size_minutes: 1
    authentication:
      requests_per_minute: 10
      burst_limit: 20
    system_operations:
      requests_per_minute: 20
      burst_limit: 50

  input_validation:
    max_request_size_mb: 10
    max_file_upload_mb: 50
    allowed_file_types: ["pdf", "doc", "docx", "txt", "json", "csv"]
    sql_injection_protection: true
    xss_protection: true
    csrf_protection: true

  response_security:
    hide_error_details: true
    sanitize_logs: true
    remove_sensitive_headers: true
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'"

# Audit and Logging Policies
audit_logging:
  log_levels:
    - "ERROR"
    - "WARNING"
    - "INFO"
    - "AUDIT"

  events_to_log:
    authentication:
      - "login_success"
      - "login_failure"
      - "logout"
      - "password_change"
      - "mfa_enabled"
      - "mfa_disabled"
    authorization:
      - "permission_granted"
      - "permission_denied"
      - "role_assigned"
      - "role_removed"
    data_access:
      - "data_read"
      - "data_modified"
      - "data_deleted"
      - "export_requested"
    system_events:
      - "configuration_change"
      - "agent_registered"
      - "agent_deregistered"
      - "task_created"
      - "task_completed"
      - "error_occurred"

  log_retention:
    audit_logs_days: 2555  # 7 years
    application_logs_days: 90
    security_logs_days: 2555
    performance_logs_days: 30

# Incident Response Policies
incident_response:
  severity_levels:
    critical:
      response_time_minutes: 15
      escalation_contacts: ["security_team", "admin_team"]
      notification_channels: ["email", "sms", "slack"]
    high:
      response_time_minutes: 60
      escalation_contacts: ["security_team"]
      notification_channels: ["email", "slack"]
    medium:
      response_time_minutes: 240
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]
    low:
      response_time_minutes: 1440  # 24 hours
      escalation_contacts: ["admin_team"]
      notification_channels: ["email"]

  incident_types:
    security_breach:
      severity: "critical"
      containment_actions:
        - "Isolate affected systems"
        - "Revoke compromised credentials"
        - "Enable enhanced monitoring"
    data_leak:
      severity: "high"
      containment_actions:
        - "Stop data flow"
        - "Assess scope of exposure"
        - "Notify affected parties"
    unauthorized_access:
      severity: "high"
      containment_actions:
        - "Block source IP"
        - "Revoke access"
        - "Investigate source"

# Compliance Policies
compliance:
  gdpr:
    enabled: true
    data_subject_rights:
      - "right_to_access"
      - "right_to_rectification"
      - "right_to_erasure"
      - "right_to_portability"
    consent_management: true
    privacy_by_design: true
    data_protection_impact_assessment: true

  sox:
    enabled: true
    financial_data_protection: true
    audit_trail_requirements: true
    access_controls: true
    change_management: true

  hipaa:
    enabled: false
    phi_protection: false
    business_associate_agreements: false

# Security Monitoring Policies
security_monitoring:
  real_time_alerts:
    - "Multiple failed login attempts"
    - "Unusual access patterns"
    - "Privilege escalation attempts"
    - "Data exfiltration attempts"
    - "System configuration changes"

  automated_responses:
    - "Block suspicious IPs"
    - "Disable compromised accounts"
    - "Increase logging verbosity"
    - "Notify security team"

  threat_intelligence:
    enabled: true
    sources: ["internal", "external_feeds"]
    update_frequency_hours: 24
    integration_apis: ["threat_feed_1", "threat_feed_2"]

# Backup and Recovery Security
backup_security:
  encryption:
    backup_encryption: true
    key_management: "separate_keys"
    key_rotation_days: 90

  access_control:
    backup_access_roles: ["admin", "backup_operator"]
    mfa_required: true
    audit_all_access: true

  retention:
    daily_backups_days: 30
    weekly_backups_weeks: 12
    monthly_backups_months: 12
    yearly_backups_years: 7

# Security Training and Awareness
security_training:
  mandatory_training:
    frequency_months: 6
    topics:
      - "Password security"
      - "Phishing awareness"
      - "Data handling"
      - "Incident reporting"

  security_awareness:
    monthly_newsletters: true
    security_tips: true
    incident_lessons_learned: true
    best_practices_sharing: true

# Third-Party Security
third_party_security:
  vendor_assessment:
    required_assessments: ["security_questionnaire", "penetration_test"]
    reassessment_frequency_months: 12
    minimum_security_standards: ["ISO27001", "SOC2"]

  api_security:
    external_api_authentication: "oauth2"
    api_key_rotation_days: 90
    rate_limiting: true
    monitoring: true


# ===== database_schema.yml =====

# NEXUS Platform Database Schema - Single Source of Truth
# Last Updated: 2025-01-15 23:25:00
# Version: 1.0.0

database:
  name: tools/utilities/tools/utilities/nexus_platform
  version: "15"
  encoding: "UTF8"
  collation: "en_US.UTF-8"

tables:
  users:
    description: "User accounts and authentication"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      username:
        type: "VARCHAR(50)"
        unique: true
        not_null: true
      email:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      password_hash:
        type: "VARCHAR(255)"
        not_null: true
      role:
        type: "VARCHAR(50)"
        not_null: true
        default: "user"
        check: "role IN ('admin', 'user', 'auditor', 'investigator')"
      is_active:
        type: "BOOLEAN"
        not_null: true
        default: true
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_users_username"
        columns: ["username"]
      - name: "idx_users_email"
        columns: ["email"]
      - name: "idx_users_role"
        columns: ["role"]

  agents:
    description: "AI agents and automation systems"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      agent_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      agent_type:
        type: "VARCHAR(100)"
        not_null: true
      status:
        type: "VARCHAR(50)"
        not_null: true
        default: "inactive"
        check: "status IN ('active', 'inactive', 'error', 'maintenance')"
      capabilities:
        type: "JSONB"
        not_null: true
        default: "[]"
      metadata:
        type: "JSONB"
        not_null: true
        default: "{}"
      last_activity:
        type: "TIMESTAMP WITH TIME ZONE"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_agents_agent_id"
        columns: ["agent_id"]
      - name: "idx_agents_status"
        columns: ["status"]
      - name: "idx_agents_type"
        columns: ["agent_type"]

  tasks:
    description: "Task management and tracking"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      task_id:
        type: "VARCHAR(100)"
        unique: true
        not_null: true
      name:
        type: "VARCHAR(255)"
        not_null: true
      description:
        type: "TEXT"
      priority:
        type: "VARCHAR(20)"
        not_null: true
        default: "medium"
        check: "priority IN ('critical', 'high', 'medium', 'low')"
      status:
        type: "VARCHAR(20)"
        not_null: true
        default: "pending"
        check: "status IN ('pending', 'in_progress', 'completed', 'failed', 'cancelled')"
      assigned_agent:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      dependencies:
        type: "JSONB"
        not_null: true
        default: "[]"
      progress:
        type: "INTEGER"
        not_null: true
        default: 0
        check: "progress >= 0 AND progress <= 100"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      completed_at:
        type: "TIMESTAMP WITH TIME ZONE"
    indexes:
      - name: "idx_tasks_task_id"
        columns: ["task_id"]
      - name: "idx_tasks_status"
        columns: ["status"]
      - name: "idx_tasks_priority"
        columns: ["priority"]
      - name: "idx_tasks_assigned_agent"
        columns: ["assigned_agent"]

  system_logs:
    description: "System events and audit logs"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      level:
        type: "VARCHAR(20)"
        not_null: true
        check: "level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')"
      component:
        type: "VARCHAR(100)"
        not_null: true
      message:
        type: "TEXT"
        not_null: true
      context:
        type: "JSONB"
        not_null: true
        default: "{}"
      user_id:
        type: "UUID"
        references: "users(id)"
      agent_id:
        type: "VARCHAR(100)"
        references: "agents(agent_id)"
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_system_logs_level"
        columns: ["level"]
      - name: "idx_system_logs_component"
        columns: ["component"]
      - name: "idx_system_logs_created_at"
        columns: ["created_at"]

  configurations:
    description: "System configuration values"
    columns:
      id:
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      config_key:
        type: "VARCHAR(255)"
        unique: true
        not_null: true
      config_value:
        type: "TEXT"
        not_null: true
      config_type:
        type: "VARCHAR(50)"
        not_null: true
        default: "string"
        check: "config_type IN ('string', 'integer', 'boolean', 'json', 'yaml')"
      description:
        type: "TEXT"
      is_encrypted:
        type: "BOOLEAN"
        not_null: true
        default: false
      is_system:
        type: "BOOLEAN"
        not_null: true
        default: false
      created_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
      updated_at:
        type: "TIMESTAMP WITH TIME ZONE"
        not_null: true
        default: "CURRENT_TIMESTAMP"
    indexes:
      - name: "idx_configurations_key"
        columns: ["config_key"]
      - name: "idx_configurations_type"
        columns: ["config_type"]
      - name: "idx_configurations_system"
        columns: ["is_system"]

# Database constraints and relationships
constraints:
  foreign_keys:
    - table: "tasks"
      column: "assigned_agent"
      references: "agents(agent_id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "user_id"
      references: "users(id)"
      on_delete: "SET NULL"
    - table: "system_logs"
      column: "agent_id"
      references: "agents(agent_id)"
      on_delete: "SET NULL"

# Database triggers
triggers:
  - name: "update_updated_at_column"
    table: "users"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "agents"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "tasks"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]
  - name: "update_updated_at_column"
    table: "configurations"
    function: "update_updated_at_column()"
    timing: "BEFORE"
    events: ["UPDATE"]

# Database functions
functions:
  - name: "update_updated_at_column"
    language: "plpgsql"
    body: |
      BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
      END;

# Database views
views:
  active_agents:
    description: "View of currently active agents"
    query: |
      SELECT * FROM agents WHERE status = 'active'

  pending_tasks:
    description: "View of pending tasks"
    query: |
      SELECT * FROM tasks WHERE status = 'pending'

  system_health:
    description: "View of system health metrics"
    query: |
      SELECT
        (SELECT COUNT(*) FROM agents WHERE status = 'active') as active_agents,
        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks,
        (SELECT COUNT(*) FROM system_logs WHERE created_at > NOW() - INTERVAL '1 hour') as recent_logs

# Database policies (Row Level Security)
policies:
  users:
    - name: "Users can view their own data"
      command: "SELECT"
      roles: ["authenticated"]
      using: "auth.uid() = id"

  system_logs:
    - name: "System logs are readable by authenticated users"
      command: "SELECT"
      roles: ["authenticated"]
      using: "true"


# ===== elasticsearch.yml =====

cluster.name: nexus-cluster
discovery.type: single-node
network.host: 0.0.0.0
node.name: nexus-node-1
xpack.monitoring.collection.enabled: true
xpack.security.enabled: false


# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== prometheus.yml =====

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - alertmanager:3700
global:
  evaluation_interval: 15s
  scrape_interval: 15s
rule_files: []
scrape_configs:
- job_name: prometheus
  static_configs:
  - targets:
    - localhost:9090
- job_name: nexus-backend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-backend:3100
- job_name: nexus-frontend
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nexus-frontend:2100
- job_name: nags-api
  metrics_path: /metrics
  scrape_interval: 10s
  static_configs:
  - targets:
    - nags-api:4100
- job_name: postgres
  scrape_interval: 30s
  static_configs:
  - targets:
    - postgres:3800
- job_name: redis
  scrape_interval: 30s
  static_configs:
  - targets:
    - redis:3900


# ===== elasticsearch.yml =====

cluster.name: nexus-cluster
discovery.type: single-node
network.host: 0.0.0.0
node.name: nexus-node-1
xpack.monitoring.collection.enabled: true
xpack.security.enabled: false


# ===== kubernetes_deployment.yaml =====

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
    spec:
      containers:
      - name: nexus-backend
        image: nexus-backend:latest
        ports:
        - containerPort: 3100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-backend
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-frontend
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-frontend
  template:
    metadata:
      labels:
        app: nexus-frontend
    spec:
      containers:
      - name: nexus-frontend
        image: nexus-frontend:latest
        ports:
        - containerPort: 2100
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "2100"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-frontend-service
  namespace: nexus-platform
spec:
  selector:
    app: nexus-frontend
  ports:
  - port: 2100
    targetPort: 2100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nags-api
  namespace: nexus-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nags-api
  template:
    metadata:
      labels:
        app: nags-api
    spec:
      containers:
      - name: nags-api
        image: nags-api:latest
        ports:
        - containerPort: 4100
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 4100
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nags-api-service
  namespace: nexus-platform
spec:
  selector:
    app: nags-api
  ports:
  - port: 4100
    targetPort: 4100
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3500
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nexus-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3500
    targetPort: 3500
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  namespace: nexus-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: nexus.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 3100
      - path: /nags
        pathType: Prefix
        backend:
          service:
            name: nags-api-service
            port:
              number: 4100
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3500
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-frontend-service
            port:
              number: 2100


# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== monitoring_config.yml =====

# NEXUS Platform Monitoring Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

monitoring:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  monitoring_stack: ["Prometheus", "Grafana", "Jaeger", "AlertManager"]

# Prometheus Configuration
prometheus:
  enabled: true
  port: 3600
  retention_days: 30
  scrape_interval: "15s"
  evaluation_interval: "15s"

  targets:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      url: "http://tools/utilities/tools/utilities/nexus-platform:3100/metrics"
      interval: "15s"
    - name: "tools/utilities/tools/utilities/nexus-data"
      url: "http://tools/utilities/tools/utilities/nexus-data:3800/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-monitoring"
      url: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/metrics"
      interval: "30s"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      url: "http://tools/utilities/tools/utilities/nexus-automation:4000/metrics"
      interval: "15s"

  rules:
    - name: "tools/utilities/tools/utilities/nexus_platform_rules"
      groups:
        - name: "system_health"
          rules:
            - alert: "HighCPUUsage"
              expr: "cpu_usage_percent > 80"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High CPU usage detected"
                description: "CPU usage is above 80% for more than 5 minutes"

            - alert: "HighMemoryUsage"
              expr: "memory_usage_percent > 85"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High memory usage detected"
                description: "Memory usage is above 85% for more than 5 minutes"

            - alert: "DiskSpaceLow"
              expr: "disk_usage_percent > 90"
              for: "2m"
              labels:
                severity: "critical"
              annotations:
                summary: "Disk space is low"
                description: "Disk usage is above 90% for more than 2 minutes"

        - name: "application_health"
          rules:
            - alert: "ServiceDown"
              expr: "up == 0"
              for: "1m"
              labels:
                severity: "critical"
              annotations:
                summary: "Service is down"
                description: "Service {{ $labels.instance }} is down"

            - alert: "HighErrorRate"
              expr: "rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High error rate detected"
                description: "Error rate is above 10% for more than 5 minutes"

            - alert: "HighResponseTime"
              expr: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
              for: "5m"
              labels:
                severity: "warning"
              annotations:
                summary: "High response time detected"
                description: "95th percentile response time is above 2 seconds"

# Grafana Configuration
grafana:
  enabled: true
  port: 3500
  admin_user: "admin"
  admin_password: "tools/utilities/tools/utilities/nexus123"

  dashboards:
    - name: "NEXUS Platform Overview"
      panels:
        - title: "System Health"
          type: "stat"
          targets:
            - expr: "up"
              legendFormat: "Service Status"
        - title: "CPU Usage"
          type: "graph"
          targets:
            - expr: "cpu_usage_percent"
              legendFormat: "CPU %"
        - title: "Memory Usage"
          type: "graph"
          targets:
            - expr: "memory_usage_percent"
              legendFormat: "Memory %"
        - title: "Request Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total[5m])"
              legendFormat: "Requests/sec"
        - title: "Error Rate"
          type: "graph"
          targets:
            - expr: "rate(http_requests_total{status=~\"5..\"}[5m])"
              legendFormat: "Errors/sec"

    - name: "Agent Monitoring"
      panels:
        - title: "Active Agents"
          type: "stat"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agents_active"
              legendFormat: "Active Agents"
        - title: "Agent Status"
          type: "table"
          targets:
            - expr: "tools/utilities/tools/utilities/nexus_agent_status"
        - title: "Task Processing Rate"
          type: "graph"
          targets:
            - expr: "rate(tools/utilities/tools/utilities/nexus_tasks_processed_total[5m])"
              legendFormat: "Tasks/sec"

    - name: "Database Monitoring"
      panels:
        - title: "Database Connections"
          type: "graph"
          targets:
            - expr: "postgresql_connections_active"
              legendFormat: "Active Connections"
        - title: "Query Performance"
          type: "graph"
          targets:
            - expr: "postgresql_query_duration_seconds"
              legendFormat: "Query Duration"
        - title: "Database Size"
          type: "stat"
          targets:
            - expr: "postgresql_database_size_bytes"
              legendFormat: "Database Size"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  port: 3400
  sampling_rate: 0.1

  services:
    - name: "tools/utilities/tools/utilities/nexus-platform"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-platform"
        - "service.version=1.0.0"
    - name: "tools/utilities/tools/utilities/nexus-automation"
      tags:
        - "service.name=tools/utilities/tools/utilities/nexus-automation"
        - "service.version=1.0.0"

  trace_config:
    max_traces: 10000
    max_spans_per_trace: 1000
    trace_ttl: "168h"  # 7 days

# AlertManager Configuration
alertmanager:
  enabled: true
  port: 3700

  receivers:
    - name: "default"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "NEXUS Platform Alert: {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

    - name: "critical"
      email_configs:
        - to: "admin@tools/utilities/tools/utilities/nexus-platform.com,security@tools/utilities/tools/utilities/nexus-platform.com"
          subject: "CRITICAL: NEXUS Platform Alert"
          body: |
            {{ range .Alerts }}
            CRITICAL ALERT: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Severity: {{ .Labels.severity }}
            {{ end }}
      slack_configs:
        - api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
          channel: "#alerts"
          title: "NEXUS Platform Critical Alert"
          text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

  route:
    group_by: ["alertname"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    receiver: "default"
    routes:
      - match:
          severity: "critical"
        receiver: "critical"
        group_wait: "5s"
        repeat_interval: "30m"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 30
  timeout_seconds: 10

  checks:
    - name: "database_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3800"
      expected_response: "postgresql_ready"

    - name: "redis_connectivity"
      type: "tcp"
      target: "tools/utilities/tools/utilities/nexus-data:3900"
      expected_response: "redis_ready"

    - name: "api_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "automation_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-automation:4000/health"
      expected_status: 200
      expected_response: '{"status":"healthy"}'

    - name: "grafana_health"
      type: "http"
      target: "http://tools/utilities/tools/utilities/nexus-monitoring:3500/api/health"
      expected_status: 200

# Log Aggregation Configuration
log_aggregation:
  enabled: true
  log_levels: ["ERROR", "WARNING", "INFO", "AUDIT"]

  sources:
    - name: "application_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/app.log"
      format: "json"
      retention_days: 30

    - name: "access_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/access.log"
      format: "combined"
      retention_days: 90

    - name: "error_logs"
      path: "/var/log/tools/utilities/tools/utilities/nexus/error.log"
      format: "json"
      retention_days: 2555  # 7 years

  processing:
    real_time_parsing: true
    log_rotation: true
    compression: true
    indexing: true

# Performance Monitoring
performance_monitoring:
  enabled: true

  metrics:
    - name: "response_time"
      type: "histogram"
      buckets: [0.1, 0.5, 1, 2, 5, 10]
      labels: ["method", "endpoint", "status"]

    - name: "request_count"
      type: "counter"
      labels: ["method", "endpoint", "status"]

    - name: "active_connections"
      type: "gauge"
      labels: ["service"]

    - name: "memory_usage"
      type: "gauge"
      labels: ["service", "type"]

    - name: "cpu_usage"
      type: "gauge"
      labels: ["service"]

  profiling:
    enabled: true
    cpu_profiling: true
    memory_profiling: true
    goroutine_profiling: true
    block_profiling: true

# Security Monitoring
security_monitoring:
  enabled: true

  events:
    - name: "failed_login_attempts"
      threshold: 5
      time_window: "5m"
      action: "alert"

    - name: "privilege_escalation"
      threshold: 1
      time_window: "1m"
      action: "alert"

    - name: "unusual_access_patterns"
      threshold: 10
      time_window: "10m"
      action: "alert"

    - name: "data_exfiltration"
      threshold: 1
      time_window: "1m"
      action: "alert"

  anomaly_detection:
    enabled: true
    algorithms: ["statistical", "machine_learning"]
    training_period_days: 30
    sensitivity: "medium"

# Uptime Monitoring
uptime_monitoring:
  enabled: true
  check_interval_seconds: 60

  endpoints:
    - name: "API Health"
      url: "http://localhost:3100/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Operations Health"
      url: "http://localhost:3200/health"
      expected_status: 200
      timeout_seconds: 10

    - name: "Frontend Health"
      url: "http://localhost:2100"
      expected_status: 200
      timeout_seconds: 15

    - name: "Grafana Health"
      url: "http://localhost:3500/api/health"
      expected_status: 200
      timeout_seconds: 10

# Capacity Planning
capacity_planning:
  enabled: true

  thresholds:
    cpu_usage_warning: 70
    cpu_usage_critical: 85
    memory_usage_warning: 75
    memory_usage_critical: 90
    disk_usage_warning: 80
    disk_usage_critical: 95

  scaling:
    auto_scaling: true
    min_instances: 1
    max_instances: 10
    scale_up_threshold: 80
    scale_down_threshold: 20
    cooldown_seconds: 300

# Reporting Configuration
reporting:
  enabled: true

  reports:
    - name: "daily_summary"
      schedule: "0 9 * * *"  # Daily at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "html"

    - name: "weekly_health"
      schedule: "0 9 * * 1"  # Weekly on Monday at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "ops@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

    - name: "monthly_metrics"
      schedule: "0 9 1 * *"  # Monthly on 1st at 9 AM
      recipients: ["admin@tools/utilities/tools/utilities/nexus-platform.com", "management@tools/utilities/tools/utilities/nexus-platform.com"]
      format: "pdf"

  dashboards:
    - name: "executive_dashboard"
      refresh_interval: "5m"
      panels: ["system_overview", "performance_metrics", "security_status"]

    - name: "operations_dashboard"
      refresh_interval: "1m"
      panels: ["detailed_metrics", "alerts", "logs"]


# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== deployment_config.yml =====

# NEXUS Platform Deployment Configuration - Single Source of Truth
# Last Updated: 2025-01-15 23:40:00
# Version: 1.0.0

deployment:
  version: "1.0.0"
  last_updated: "2025-01-15T23:40:00Z"
  environment: "production"
  deployment_strategy: "blue_green"

# Environment Configurations
environments:
  development:
    replicas: 1
    resources:
      cpu: "500m"
      memory: "1Gi"
    scaling:
      min_replicas: 1
      max_replicas: 3
    features:
      debug_mode: true
      hot_reload: true
      verbose_logging: true

  staging:
    replicas: 2
    resources:
      cpu: "1000m"
      memory: "2Gi"
    scaling:
      min_replicas: 2
      max_replicas: 5
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

  production:
    replicas: 3
    resources:
      cpu: "2000m"
      memory: "4Gi"
    scaling:
      min_replicas: 3
      max_replicas: 10
    features:
      debug_mode: false
      hot_reload: false
      verbose_logging: false

# Service Definitions
services:
  tools/utilities/tools/utilities/nexus-platform:
    image: "tools/utilities/tools/utilities/nexus-platform:latest"
    ports:
      - port: 3100
        name: "api"
        protocol: "TCP"
      - port: 3200
        name: "operations"
        protocol: "TCP"
    environment:
      - name: "NODE_ENV"
        value: "production"
      - name: "API_PORT"
        value: "3100"
      - name: "OPERATIONS_PORT"
        value: "3200"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
    health_check:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
    liveness_probe:
      http_get:
        path: "/health"
        port: 3100
      initial_delay_seconds: 60
      period_seconds: 30
    readiness_probe:
      http_get:
        path: "/ready"
        port: 3100
      initial_delay_seconds: 10
      period_seconds: 5

  tools/utilities/tools/utilities/nexus-data:
    image: "postgres:15-alpine"
    ports:
      - port: 3800
        name: "postgresql"
        protocol: "TCP"
    environment:
      - name: "POSTGRES_DB"
        value: "tools/utilities/tools/utilities/nexus_platform"
      - name: "POSTGRES_USER"
        value: "tools/utilities/tools/utilities/nexus"
      - name: "POSTGRES_PASSWORD"
        value_from:
          secret_key_ref:
            name: "tools/utilities/tools/utilities/nexus-db-secret"
            key: "password"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    volume_mounts:
      - name: "postgres-data"
        mount_path: "/var/lib/postgresql/data"
    health_check:
      exec:
        command: ["pg_isready", "-U", "tools/utilities/tools/utilities/nexus", "-d", "tools/utilities/tools/utilities/nexus_platform"]
      initial_delay_seconds: 30
      period_seconds: 10

  tools/utilities/tools/utilities/nexus-monitoring:
    image: "grafana/grafana:latest"
    ports:
      - port: 3500
        name: "grafana"
        protocol: "TCP"
    environment:
      - name: "GF_SECURITY_ADMIN_PASSWORD"
        value: "tools/utilities/tools/utilities/nexus123"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    volume_mounts:
      - name: "grafana-data"
        mount_path: "/var/lib/grafana"

  tools/utilities/tools/utilities/nexus-automation:
    image: "tools/utilities/tools/utilities/nexus-automation:latest"
    ports:
      - port: 4000
        name: "automation"
        protocol: "TCP"
    environment:
      - name: "HEALTH_MONITOR_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/health"
      - name: "FRENLY_AI_URL"
        value: "http://tools/utilities/tools/utilities/nexus-platform:3100/api/frenly-ai"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

# Ingress Configuration
ingress:
  enabled: true
  class: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  rules:
    - host: "api.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3100

    - host: "ops.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-platform"
                port:
                  number: 3200

    - host: "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
      http:
        paths:
          - path: "/"
            path_type: "Prefix"
            backend:
              service:
                name: "tools/utilities/tools/utilities/nexus-monitoring"
                port:
                  number: 3500

# SSL/TLS Configuration
ssl:
  enabled: true
  certificate_issuer: "letsencrypt-prod"
  certificate_secret: "tools/utilities/tools/utilities/nexus-platform-tls"
  domains:
    - "api.tools/utilities/tools/utilities/nexus-platform.com"
    - "ops.tools/utilities/tools/utilities/nexus-platform.com"
    - "monitoring.tools/utilities/tools/utilities/nexus-platform.com"
  tls_version: "1.3"
  cipher_suites:
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

# Persistent Volumes
volumes:
  postgres-data:
    type: "persistentVolumeClaim"
    size: "50Gi"
    storage_class: "fast-ssd"
    access_mode: "ReadWriteOnce"

  grafana-data:
    type: "persistentVolumeClaim"
    size: "10Gi"
    storage_class: "standard"
    access_mode: "ReadWriteOnce"

  tools/utilities/tools/utilities/nexus-logs:
    type: "persistentVolumeClaim"
    size: "100Gi"
    storage_class: "standard"
    access_mode: "ReadWriteMany"

# ConfigMaps
config_maps:
  tools/utilities/tools/utilities/nexus-config:
    data:
      ports.yml: |
        # Port configuration from SSOT
        ports:
          api: 3100
          operations: 3200
          postgresql: 3800
          redis: 3900
          grafana: 3500
          automation: 4000

      environment.yml: |
        # Environment configuration from SSOT
        NODE_ENV: production
        API_PORT: 3100
        OPERATIONS_PORT: 3200
        DATABASE_URL: postgresql://tools/utilities/tools/utilities/nexus:tools/utilities/tools/utilities/nexus123@tools/utilities/tools/utilities/nexus-data:3800/tools/utilities/tools/utilities/nexus_platform
        REDIS_URL: redis://tools/utilities/tools/utilities/nexus-data:3900

# Secrets
secrets:
  tools/utilities/tools/utilities/nexus-db-secret:
    type: "Opaque"
    data:
      password: "bmV4dXMxMjM="  # base64 encoded
      username: "bmV4dXM="

  tools/utilities/tools/utilities/nexus-api-secret:
    type: "Opaque"
    data:
      jwt_secret: "your-jwt-secret-key"
      api_key: "your-api-key"

# Network Policies
network_policies:
  - name: "tools/utilities/tools/utilities/nexus-platform-netpol"
    pod_selector:
      match_labels:
        app: "tools/utilities/tools/utilities/nexus-platform"
    policy_types: ["Ingress", "Egress"]
    ingress:
      - from:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-monitoring"
        ports:
          - protocol: "TCP"
            port: 3100

    egress:
      - to:
          - pod_selector:
              match_labels:
                app: "tools/utilities/tools/utilities/nexus-data"
        ports:
          - protocol: "TCP"
            port: 3800

# Horizontal Pod Autoscaler
hpa:
  tools/utilities/tools/utilities/nexus-platform:
    min_replicas: 3
    max_replicas: 10
    target_cpu_utilization_percentage: 70
    target_memory_utilization_percentage: 80
    scale_up_policy:
      stabilization_window_seconds: 60
      policies:
        - type: "Pods"
          value: 2
          period_seconds: 60
    scale_down_policy:
      stabilization_window_seconds: 300
      policies:
        - type: "Pods"
          value: 1
          period_seconds: 60

# Pod Disruption Budget
pdb:
  tools/utilities/tools/utilities/nexus-platform:
    min_available: 2
  tools/utilities/tools/utilities/nexus-data:
    min_available: 1

# Resource Quotas
resource_quotas:
  namespace: "tools/utilities/tools/utilities/nexus-platform"
  limits:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Deployment Strategy
deployment_strategy:
  type: "RollingUpdate"
  rolling_update:
    max_unavailable: "25%"
    max_surge: "25%"

  blue_green:
    enabled: true
    active_color: "blue"
    standby_color: "green"
    switch_timeout: "300s"
    pre_switch_hooks:
      - name: "health_check"
        command: "curl -f http://localhost:3100/health"
        timeout: "30s"
    post_switch_hooks:
      - name: "smoke_test"
        command: "curl -f http://localhost:3100/api/health"
        timeout: "60s"

# Monitoring and Observability
observability:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"

  tracing:
    enabled: true
    jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    sampling_rate: 0.1

  logging:
    level: "info"
    format: "json"
    output: "stdout"
    structured: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30

  databases:
    - name: "tools/utilities/tools/utilities/nexus_platform"
      type: "postgresql"
      backup_command: "pg_dump -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"
      restore_command: "psql -h tools/utilities/tools/utilities/nexus-data -U tools/utilities/tools/utilities/nexus tools/utilities/tools/utilities/nexus_platform"

  volumes:
    - name: "postgres-data"
      snapshot_enabled: true
      retention_days: 7

# Disaster Recovery
disaster_recovery:
  enabled: true
  rto_minutes: 60  # Recovery Time Objective
  rpo_minutes: 15  # Recovery Point Objective

  backup_locations:
    - name: "primary"
      type: "s3"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups"
      region: "us-west-2"
    - name: "secondary"
      type: "gcs"
      bucket: "tools/utilities/tools/utilities/nexus-platform-backups-dr"
      region: "us-east-1"

  failover:
    automatic: false
    manual_trigger: true
    notification_channels: ["email", "slack"]


# ===== jaeger.yml =====

agent:
  zipkin:
    http-port: 9411
collector:
  zipkin:
    http-port: 9411
query:
  port: 16686


# ===== enhanced_ports.yml =====

enhancements:
  automation:
    auto_scaling: true
    backup: true
    deployment: true
    service_discovery: true
  monitoring:
    alerting: true
    logging: true
    metrics: true
    tracing: true
  performance:
    caching: true
    compression: true
    connection_pooling: true
    load_balancing: true
  security:
    audit_logging: true
    authentication: true
    https: true
    rate_limiting: true
metadata:
  enhancements_count: 31
  last_updated: '2025-09-16T01:43:36.665168'
  status: enhanced
  total_services: 32
  version: '2.0'
ports:
  audit_service: 4500
  auth_service: 2000
  backup_recovery: 3900
  cdn_service: 4300
  consul: 3000
  db_migration: 3800
  disaster_recovery: 4100
  elasticsearch: 2200
  enhanced_load_balancer: 3700
  enhanced_prometheus: 1900
  environment_manager: 4000
  grafana: 1000
  jaeger: 2400
  kibana: 2300
  kong_gateway: 3100
  load_balancer: 2100
  logstash: 3400
  nags_api: 1400
  nags_dashboard: 1600
  nags_metrics: 1700
  nags_websocket: 1500
  nginx: 1300
  oauth2_jwt: 3500
  performance_optimizer: 4200
  postgresql: 1100
  prometheus: 3300
  rabbitmq: 2600
  redis: 1200
  redis_cache_optimizer: 1800
  security_hardening: 4400
  security_scanner: 3600
  vault: 3200


# ===== ports.yml =====

# NEXUS Platform Port Configuration
# Single source of truth for all port assignments

ports:
  # Frontend Services
  frontend_cyberpunk: 2100
  frontend_glassmorphism: 2400
  frontend_modern: 2200
  frontend_matrix: 2300

  # Backend Services
  api: 3100
  operations: 3200

  # Data Services
  postgresql: 1100
  redis: 1200

  # Monitoring Services
  grafana: 1000
  prometheus: 3600
  alertmanager: 3700
  jaeger: 3400

  # Automation Services
  automation: 4000

  # NAGS Services (1400+ range with 100 increments)
  nags_api: 1400
  nags_websocket: 1500
  nags_dashboard: 1600
  nags_metrics: 1700
  # Future NAGS services: 1800, 1900, 2000, etc.

  # Gateway Services
  nginx_http: 1300
  nginx_https: 1400

  # Additional Services
  nexus_tier5: 8080
  docker_registry: 5001
  kubernetes_api: 6444
  docker_desktop: 8001

  # Legacy Services (to be migrated)
  auth_service: 3003
  postgres_legacy: 5432
  redis_legacy: 6379
