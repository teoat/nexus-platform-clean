apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus
  labels:
    app: nexus-backend
    version: v2.0.0
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
        version: v2.0.0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nexus-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: nexus-backend
          image: nexus-backend:2.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: nexus-config
                  key: NODE_ENV
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: nexus-config
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: nexus-config
                  key: REDIS_URL
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: nexus-secrets
                  key: JWT_SECRET_KEY
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: nexus-secrets
                  key: ENCRYPTION_KEY
            - name: SECRETS_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: nexus-secrets
                  key: SECRETS_MASTER_KEY
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: logs
              mountPath: /nexus_backend/logs
            - name: config
              mountPath: /nexus_backend/config
              readOnly: true
      volumes:
        - name: logs
          emptyDir: {}
        - name: config
          configMap:
            name: nexus-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - nexus-backend
                topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend
  namespace: nexus
  labels:
    app: nexus-backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    app: nexus-backend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexus-backend
  namespace: nexus
  labels:
    app: nexus-backend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nexus-backend
  namespace: nexus
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nexus-backend
  namespace: nexus
subjects:
  - kind: ServiceAccount
    name: nexus-backend
    namespace: nexus
roleRef:
  kind: Role
  name: nexus-backend
  apiGroup: rbac.authorization.k8s.io
