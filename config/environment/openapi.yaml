openapi: 3.0.3
info:
  title: NEXUS Platform API
  description: |
    NEXUS Platform API - Financial Management System

    This API specification serves as the **single source of truth** for all API contracts
    between frontend and backend services. All endpoints, schemas, and responses
    are defined here to ensure consistency and proper API-first development.

    ## Key Principles
    - **API-First Development**: This specification drives both backend implementation and frontend integration
    - **Single Source of Truth**: All API contracts are defined here, not in code comments or documentation
    - **Schema-Driven**: TypeScript schemas are auto-generated from these OpenAPI definitions
    - **Versioned**: All changes are tracked and versioned through this specification

    ## Authentication
    All API endpoints require authentication using JWT tokens:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Error Handling
    The API uses standard HTTP status codes with consistent error response format:
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid input data",
        "details": {
          "field": "email",
          "reason": "Invalid email format"
        }
      }
    }
    ```
  version: 1.0.0
  contact:
    name: NEXUS Platform Team
    email: api@nexus-platform.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api-staging.nexus-platform.com/api/v1
    description: Staging server
  - url: https://api.nexus-platform.com/api/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  # Health and Status
  /api/v1/status:
    get:
      summary: Get API status
      description: Returns the current operational status of the API
      tags:
        - System
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusResponse'

  /api/v1/health:
    get:
      summary: Health check
      description: Comprehensive health check for all system components
      tags:
        - System
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  # User Management
  /api/v1/users/profile:
    get:
      summary: Get user profile
      description: Retrieve the current user's profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update user profile
      description: Update the current user's profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Account Management
  /api/v1/accounts:
    get:
      summary: List accounts
      description: Retrieve a list of user accounts with optional filtering
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: account_type
          in: query
          schema:
            type: string
            enum: [checking, savings, credit_card, investment, loan]
          description: Filter by account type
      responses:
        '200':
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create account
      description: Create a new financial account
      tags:
        - Accounts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/accounts/{account_id}:
    get:
      summary: Get account
      description: Retrieve a specific account by ID
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update account
      description: Update an existing account
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete account
      description: Delete an account (soft delete)
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
      responses:
        '204':
          description: Account deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Transaction Management
  /api/v1/transactions:
    get:
      summary: List transactions
      description: Retrieve transactions with filtering and pagination
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: account_id
          in: query
          schema:
            type: integer
          description: Filter by account ID
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter by category ID
        - name: transaction_type
          in: query
          schema:
            type: string
            enum: [income, expense, transfer]
          description: Filter by transaction type
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions from this date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions until this date
        - name: min_amount
          in: query
          schema:
            type: number
            minimum: 0
          description: Minimum transaction amount
        - name: max_amount
          in: query
          schema:
            type: number
            minimum: 0
          description: Maximum transaction amount
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create transaction
      description: Create a new financial transaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/transactions/{transaction_id}:
    get:
      summary: Get transaction
      description: Retrieve a specific transaction by ID
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
          description: Transaction ID
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update transaction
      description: Update an existing transaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
          description: Transaction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete transaction
      description: Delete a transaction (soft delete)
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
          description: Transaction ID
      responses:
        '204':
          description: Transaction deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /transactions:
    get:
      summary: List transactions
      description: Get paginated list of user transactions
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: category
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [income, expense, transfer]
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  summary:
                    $ref: '#/components/schemas/TransactionSummary'

    post:
      summary: Create transaction
      description: Create a new financial transaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/ValidationError'

  /transactions/{transaction_id}:
    get:
      summary: Get transaction details
      description: Get detailed information about a specific transaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction details retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update transaction
      description: Update transaction information
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete transaction
      description: Delete a transaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Transaction deleted successfully"
        '404':
          $ref: '#/components/responses/NotFoundError'

  /analytics/dashboard:
    get:
      summary: Get analytics dashboard
      description: Get comprehensive financial analytics dashboard data
      tags:
        - Analytics
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [week, month, quarter, year]
            default: month
        - name: currency
          in: query
          schema:
            type: string
            default: USD
      responses:
        '200':
          description: Analytics dashboard data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  dashboard:
                    $ref: '#/components/schemas/AnalyticsDashboard'

  /budgets:
    get:
      summary: List budgets
      description: Get user's budgets
      tags:
        - Budgets
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Budgets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  budgets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Budget'

    post:
      summary: Create budget
      description: Create a new budget
      tags:
        - Budgets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetCreate'
      responses:
        '201':
          description: Budget created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  budget:
                    $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/ValidationError'

  /health:
    get:
      summary: Health check
      description: Basic health check endpoint
      tags:
        - System
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

  /health/detailed:
    get:
      summary: Detailed health check
      description: Comprehensive health check with component status
      tags:
        - System
      responses:
        '200':
          description: Detailed health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        component_name:
                          type: string
                        component_type:
                          type: string
                        status:
                          type: string
                        last_check:
                          type: string
                          format: date-time
                        response_time:
                          type: number
                        error_message:
                          type: string
                  summary:
                    type: object
                    properties:
                      total_checks:
                        type: integer
                      healthy_checks:
                        type: integer
                      degraded_checks:
                        type: integer
                      unhealthy_checks:
                        type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Common Response Schemas
    ApiStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [operational, degraded, maintenance]
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: string
            enum: [running, stopped, error]
      required:
        - status
        - version
        - services

    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, warning]
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          additionalProperties:
            type: string
            enum: [ok, error, warning]
      required:
        - status
        - timestamp
        - checks

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
          required:
            - code
            - message
      required:
        - error

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0
      required:
        - page
        - limit
        - total
        - total_pages

    # User Schemas
    UserProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
      additionalProperties: false

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        full_name:
          type: string
          nullable: true
        role:
          type: string
          enum: [admin, user, auditor]
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - role
        - is_active
        - created_at

    # Account Schemas
    AccountCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        account_type:
          type: string
          enum: [checking, savings, credit_card, investment, loan]
        balance:
          type: number
          format: decimal
          minimum: 0
        currency:
          type: string
          minLength: 3
          maxLength: 3
          default: USD
        institution:
          type: string
          maxLength: 100
        account_number:
          type: string
          maxLength: 50
        is_active:
          type: boolean
          default: true
      required:
        - name
        - account_type
        - balance

    AccountUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        balance:
          type: number
          format: decimal
          minimum: 0
        institution:
          type: string
          maxLength: 100
        account_number:
          type: string
          maxLength: 50
        is_active:
          type: boolean
      additionalProperties: false

    AccountResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        account_type:
          type: string
          enum: [checking, savings, credit_card, investment, loan]
        balance:
          type: number
          format: decimal
        currency:
          type: string
        institution:
          type: string
          nullable: true
        account_number:
          type: string
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - name
        - account_type
        - balance
        - currency
        - is_active
        - created_at
        - updated_at

    AccountListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - data
        - meta

    # Transaction Schemas
    TransactionCreate:
      type: object
      properties:
        account_id:
          type: integer
        amount:
          type: number
          format: decimal
          minimum: 0.01
        description:
          type: string
          minLength: 1
          maxLength: 500
        transaction_type:
          type: string
          enum: [income, expense, transfer]
        category_id:
          type: integer
          nullable: true
        transaction_date:
          type: string
          format: date-time
          nullable: true
        reference_number:
          type: string
          maxLength: 100
          nullable: true
        notes:
          type: string
          maxLength: 1000
          nullable: true
        tags:
          type: array
          items:
            type: string
          maxItems: 10
          nullable: true
      required:
        - account_id
        - amount
        - description
        - transaction_type

    TransactionUpdate:
      type: object
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0.01
        description:
          type: string
          minLength: 1
          maxLength: 500
        category_id:
          type: integer
          nullable: true
        notes:
          type: string
          maxLength: 1000
          nullable: true
        tags:
          type: array
          items:
            type: string
          maxItems: 10
          nullable: true
        status:
          type: string
          enum: [pending, completed, cancelled, failed]
      additionalProperties: false

    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        account_id:
          type: integer
        amount:
          type: number
          format: decimal
        description:
          type: string
        transaction_type:
          type: string
          enum: [income, expense, transfer]
        category_id:
          type: integer
          nullable: true
        status:
          type: string
          enum: [pending, completed, cancelled, failed]
        transaction_date:
          type: string
          format: date-time
        reference_number:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - account_id
        - amount
        - description
        - transaction_type
        - status
        - transaction_date
        - created_at
        - updated_at

    TransactionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - data
        - meta

    UserProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
        preferences:
          type: object
          additionalProperties: true

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        amount:
          type: number
          format: decimal
          example: 123.45
        currency:
          type: string
          example: "USD"
        type:
          type: string
          enum: [income, expense, transfer]
          example: "expense"
        category:
          type: string
          example: "groceries"
        description:
          type: string
          example: "Weekly grocery shopping"
        date:
          type: string
          format: date
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TransactionCreate:
      type: object
      required:
        - amount
        - currency
        - type
        - category
        - description
        - date
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0
        currency:
          type: string
          minLength: 3
          maxLength: 3
        type:
          type: string
          enum: [income, expense, transfer]
        category:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          minLength: 1
          maxLength: 500
        date:
          type: string
          format: date
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object

    TransactionUpdate:
      type: object
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0
        currency:
          type: string
          minLength: 3
          maxLength: 3
        type:
          type: string
          enum: [income, expense, transfer]
        category:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          minLength: 1
          maxLength: 500
        date:
          type: string
          format: date
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object

    TransactionSummary:
      type: object
      properties:
        total_income:
          type: number
          format: decimal
        total_expenses:
          type: number
          format: decimal
        net_amount:
          type: number
          format: decimal
        transaction_count:
          type: integer
        categories:
          type: object
          additionalProperties:
            type: number
            format: decimal

    AnalyticsDashboard:
      type: object
      properties:
        period:
          type: string
          example: "month"
        currency:
          type: string
          example: "USD"
        summary:
          $ref: '#/components/schemas/TransactionSummary'
        trends:
          type: object
          properties:
            income_trend:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  amount:
                    type: number
                    format: decimal
            expense_trend:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  amount:
                    type: number
                    format: decimal
        categories:
          type: object
          additionalProperties:
            type: object
            properties:
              total:
                type: number
                format: decimal
              percentage:
                type: number
                format: decimal
              trend:
                type: string
                enum: [up, down, stable]
        predictions:
          type: object
          properties:
            next_month_income:
              type: number
              format: decimal
            next_month_expenses:
              type: number
              format: decimal
            savings_goal_progress:
              type: number
              format: decimal

    Budget:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
          example: "Monthly Budget"
        period:
          type: string
          enum: [weekly, monthly, quarterly, yearly]
          example: "monthly"
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        categories:
          type: object
          additionalProperties:
            type: object
            properties:
              budgeted:
                type: number
                format: decimal
              spent:
                type: number
                format: decimal
              remaining:
                type: number
                format: decimal
        total_budgeted:
          type: number
          format: decimal
        total_spent:
          type: number
          format: decimal
        total_remaining:
          type: number
          format: decimal
        status:
          type: string
          enum: [active, completed, exceeded]
          example: "active"

    BudgetCreate:
      type: object
      required:
        - name
        - period
        - start_date
        - end_date
        - categories
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        period:
          type: string
          enum: [weekly, monthly, quarterly, yearly]
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        categories:
          type: object
          additionalProperties:
            type: number
            format: decimal
            minimum: 0

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 8
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "VALIDATION_ERROR"
                  message:
                    type: string
                    example: "Invalid input data"
                  status_code:
                    type: integer
                    example: 400
                  details:
                    type: object

    AuthenticationError:
      description: Authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "AUTHENTICATION_ERROR"
                  message:
                    type: string
                    example: "Invalid credentials"
                  status_code:
                    type: integer
                    example: 401

    AuthorizationError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "AUTHORIZATION_ERROR"
                  message:
                    type: string
                    example: "Insufficient permissions"
                  status_code:
                    type: integer
                    example: 403

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "NOT_FOUND_ERROR"
                  message:
                    type: string
                    example: "Resource not found"
                  status_code:
                    type: integer
                    example: 404
                  details:
                    type: object
                    properties:
                      resource:
                        type: string
                      resource_id:
                        type: string

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "CONFLICT_ERROR"
                  message:
                    type: string
                    example: "Resource already exists"
                  status_code:
                    type: integer
                    example: 409

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "RATE_LIMIT_ERROR"
                  message:
                    type: string
                    example: "Too many requests"
                  status_code:
                    type: integer
                    example: 429
                  details:
                    type: object
                    properties:
                      retry_after:
                        type: integer
                        description: Seconds to wait before retrying

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
