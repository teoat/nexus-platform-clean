# Workflow Definitions for NEXUS Platform Automation Framework
# Comprehensive workflow configurations for all automation levels

workflows:
  # Level 1: Infrastructure Automation
  infrastructure_provisioning:
    workflow_id: "infrastructure_provisioning"
    name: "Infrastructure Provisioning"
    description: "Automated infrastructure provisioning and setup"
    automation_level: "infrastructure"
    triggers:
      - type: "manual"
        user_roles: ["admin", "devops"]
      - type: "schedule"
        cron: "0 0 * * 0" # Weekly
    steps:
      - step_id: "validate_requirements"
        name: "Validate Requirements"
        description: "Validate infrastructure requirements"
        type: "configuration_management"
        automation_level: "infrastructure"
        inputs:
          requirements: "infrastructure_requirements.yaml"
        outputs:
          validation_result: "validation_status"
        timeout: 300
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: []

      - step_id: "provision_resources"
        name: "Provision Resources"
        description: "Provision infrastructure resources"
        type: "infrastructure_provisioning"
        automation_level: "infrastructure"
        inputs:
          validation_result: "validation_status"
        outputs:
          resources: "provisioned_resources"
        timeout: 1800
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["validate_requirements"]

      - step_id: "configure_resources"
        name: "Configure Resources"
        description: "Configure provisioned resources"
        type: "configuration_management"
        automation_level: "infrastructure"
        inputs:
          resources: "provisioned_resources"
        outputs:
          configuration: "resource_configuration"
        timeout: 900
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["provision_resources"]

      - step_id: "validate_deployment"
        name: "Validate Deployment"
        description: "Validate infrastructure deployment"
        type: "service_monitoring"
        automation_level: "infrastructure"
        inputs:
          configuration: "resource_configuration"
        outputs:
          validation: "deployment_validation"
        timeout: 600
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["configure_resources"]

  # Level 2: Operational Automation
  service_deployment:
    workflow_id: "service_deployment"
    name: "Service Deployment"
    description: "Automated service deployment with validation"
    automation_level: "operational"
    triggers:
      - type: "git_push"
        branch: "main"
        conditions:
          - "files_changed: ['nexus_backend/', 'nexus_frontend/']"
      - type: "manual"
        user_roles: ["admin", "developer"]
    steps:
      - step_id: "validate_code"
        name: "Validate Code"
        description: "Validate code quality and security"
        type: "configuration_management"
        automation_level: "operational"
        inputs:
          source_code: "git_repository"
          quality_gates: "quality_gates.yaml"
        outputs:
          validation_result: "code_validation"
        timeout: 300
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: []

      - step_id: "run_tests"
        name: "Run Tests"
        description: "Execute automated tests"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          validation_result: "code_validation"
          test_suite: "test_configuration.yaml"
        outputs:
          test_results: "test_execution_results"
        timeout: 900
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["validate_code"]

      - step_id: "build_artifacts"
        name: "Build Artifacts"
        description: "Build deployment artifacts"
        type: "service_deployment"
        automation_level: "operational"
        inputs:
          test_results: "test_execution_results"
          build_config: "build_configuration.yaml"
        outputs:
          artifacts: "deployment_artifacts"
        timeout: 600
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["run_tests"]

      - step_id: "deploy_staging"
        name: "Deploy to Staging"
        description: "Deploy to staging environment"
        type: "service_deployment"
        automation_level: "operational"
        inputs:
          artifacts: "deployment_artifacts"
          staging_config: "staging_configuration.yaml"
        outputs:
          staging_deployment: "staging_deployment_status"
        timeout: 1200
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["build_artifacts"]

      - step_id: "run_integration_tests"
        name: "Run Integration Tests"
        description: "Execute integration tests"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          staging_deployment: "staging_deployment_status"
          test_scenarios: "integration_test_scenarios.yaml"
        outputs:
          integration_results: "integration_test_results"
        timeout: 1800
        retry_policy:
          max_retries: 1
          backoff: "fixed"
          base_delay: 300
        dependencies: ["deploy_staging"]

      - step_id: "deploy_production"
        name: "Deploy to Production"
        description: "Deploy to production environment"
        type: "service_deployment"
        automation_level: "operational"
        inputs:
          integration_results: "integration_test_results"
          production_config: "production_configuration.yaml"
        outputs:
          production_deployment: "production_deployment_status"
        timeout: 1800
        retry_policy:
          max_retries: 1
          backoff: "fixed"
          base_delay: 300
        dependencies: ["run_integration_tests"]
        conditions:
          - "integration_results.status == 'passed'"

      - step_id: "post_deployment_validation"
        name: "Post-Deployment Validation"
        description: "Validate production deployment"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          production_deployment: "production_deployment_status"
          health_checks: "health_check_configuration.yaml"
        outputs:
          validation_status: "post_deployment_validation"
        timeout: 600
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["deploy_production"]

      - step_id: "notify_stakeholders"
        name: "Notify Stakeholders"
        description: "Notify stakeholders of deployment status"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          validation_status: "post_deployment_validation"
          notification_config: "notification_configuration.yaml"
        outputs:
          notification_status: "stakeholder_notification"
        timeout: 120
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 60
        dependencies: ["post_deployment_validation"]

  # Level 3: Tactical Automation
  resource_optimization:
    workflow_id: "resource_optimization"
    name: "Resource Optimization"
    description: "Automated resource optimization and performance tuning"
    automation_level: "tactical"
    triggers:
      - type: "schedule"
        cron: "0 2 * * *" # Daily at 2 AM
      - type: "event"
        event_type: "high_resource_usage"
    steps:
      - step_id: "analyze_resource_usage"
        name: "Analyze Resource Usage"
        description: "Analyze current resource usage patterns"
        type: "service_monitoring"
        automation_level: "tactical"
        inputs:
          monitoring_data: "prometheus_metrics"
          time_range: "24h"
        outputs:
          usage_analysis: "resource_usage_analysis"
        timeout: 600
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: []

      - step_id: "identify_optimization_opportunities"
        name: "Identify Optimization Opportunities"
        description: "Identify resource optimization opportunities"
        type: "resource_optimization"
        automation_level: "tactical"
        inputs:
          usage_analysis: "resource_usage_analysis"
          optimization_criteria: "optimization_criteria.yaml"
        outputs:
          opportunities: "optimization_opportunities"
        timeout: 900
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["analyze_resource_usage"]

      - step_id: "implement_optimizations"
        name: "Implement Optimizations"
        description: "Implement identified optimizations"
        type: "resource_optimization"
        automation_level: "tactical"
        inputs:
          opportunities: "optimization_opportunities"
          implementation_config: "optimization_implementation.yaml"
        outputs:
          optimization_results: "optimization_implementation_results"
        timeout: 1800
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["identify_optimization_opportunities"]

      - step_id: "validate_optimizations"
        name: "Validate Optimizations"
        description: "Validate optimization results"
        type: "performance_tuning"
        automation_level: "tactical"
        inputs:
          optimization_results: "optimization_implementation_results"
          validation_criteria: "optimization_validation.yaml"
        outputs:
          validation_results: "optimization_validation_results"
        timeout: 1200
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["implement_optimizations"]

      - step_id: "generate_optimization_report"
        name: "Generate Optimization Report"
        description: "Generate optimization report"
        type: "service_monitoring"
        automation_level: "tactical"
        inputs:
          validation_results: "optimization_validation_results"
          report_template: "optimization_report_template.yaml"
        outputs:
          report: "optimization_report"
        timeout: 300
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 60
        dependencies: ["validate_optimizations"]

  # Level 4: Strategic Automation
  business_strategy_execution:
    workflow_id: "business_strategy_execution"
    name: "Business Strategy Execution"
    description: "Execute business strategy with automated decision making"
    automation_level: "strategic"
    triggers:
      - type: "schedule"
        cron: "0 0 1 * *" # Monthly
      - type: "event"
        event_type: "market_change"
    steps:
      - step_id: "analyze_market_conditions"
        name: "Analyze Market Conditions"
        description: "Analyze current market conditions"
        type: "market_analysis"
        automation_level: "strategic"
        inputs:
          market_data: "market_data_sources"
          analysis_period: "30d"
        outputs:
          market_analysis: "market_conditions_analysis"
        timeout: 1800
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 120
        dependencies: []

      - step_id: "gather_competitive_intelligence"
        name: "Gather Competitive Intelligence"
        description: "Gather competitive intelligence data"
        type: "competitive_intelligence"
        automation_level: "strategic"
        inputs:
          competitors: "competitor_list.yaml"
          intelligence_sources: "intelligence_sources.yaml"
        outputs:
          competitive_data: "competitive_intelligence_data"
        timeout: 2400
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 180
        dependencies: ["analyze_market_conditions"]

      - step_id: "develop_strategy_recommendations"
        name: "Develop Strategy Recommendations"
        description: "Develop strategic recommendations"
        type: "business_strategy"
        automation_level: "strategic"
        inputs:
          market_analysis: "market_conditions_analysis"
          competitive_data: "competitive_intelligence_data"
          business_objectives: "business_objectives.yaml"
        outputs:
          recommendations: "strategy_recommendations"
        timeout: 3600
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 300
        dependencies: ["gather_competitive_intelligence"]

      - step_id: "execute_strategy_decisions"
        name: "Execute Strategy Decisions"
        description: "Execute approved strategy decisions"
        type: "business_strategy"
        automation_level: "strategic"
        inputs:
          recommendations: "strategy_recommendations"
          execution_plan: "strategy_execution_plan.yaml"
        outputs:
          execution_results: "strategy_execution_results"
        timeout: 7200
        retry_policy:
          max_retries: 1
          backoff: "fixed"
          base_delay: 600
        dependencies: ["develop_strategy_recommendations"]

      - step_id: "monitor_strategy_impact"
        name: "Monitor Strategy Impact"
        description: "Monitor strategy execution impact"
        type: "long_term_planning"
        automation_level: "strategic"
        inputs:
          execution_results: "strategy_execution_results"
          kpi_metrics: "kpi_metrics.yaml"
        outputs:
          impact_analysis: "strategy_impact_analysis"
        timeout: 1800
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 120
        dependencies: ["execute_strategy_decisions"]

      - step_id: "generate_strategy_report"
        name: "Generate Strategy Report"
        description: "Generate comprehensive strategy report"
        type: "business_strategy"
        automation_level: "strategic"
        inputs:
          impact_analysis: "strategy_impact_analysis"
          report_template: "strategy_report_template.yaml"
        outputs:
          report: "strategy_execution_report"
        timeout: 600
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["monitor_strategy_impact"]

  # Event-Driven Workflows
  system_response:
    workflow_id: "system_response"
    name: "System Response"
    description: "Automated system response to alerts and issues"
    automation_level: "operational"
    triggers:
      - type: "event"
        event_type: "system_alert"
    steps:
      - step_id: "assess_alert_severity"
        name: "Assess Alert Severity"
        description: "Assess the severity of the system alert"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          alert: "system_alert_data"
          severity_criteria: "severity_criteria.yaml"
        outputs:
          severity_assessment: "alert_severity_assessment"
        timeout: 60
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 30
        dependencies: []

      - step_id: "determine_response_action"
        name: "Determine Response Action"
        description: "Determine appropriate response action"
        type: "service_healing"
        automation_level: "operational"
        inputs:
          severity_assessment: "alert_severity_assessment"
          response_policies: "response_policies.yaml"
        outputs:
          response_action: "determined_response_action"
        timeout: 120
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 60
        dependencies: ["assess_alert_severity"]

      - step_id: "execute_response_action"
        name: "Execute Response Action"
        description: "Execute the determined response action"
        type: "service_healing"
        automation_level: "operational"
        inputs:
          response_action: "determined_response_action"
          execution_config: "response_execution_config.yaml"
        outputs:
          execution_result: "response_execution_result"
        timeout: 600
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["determine_response_action"]

      - step_id: "validate_response_effectiveness"
        name: "Validate Response Effectiveness"
        description: "Validate the effectiveness of the response"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          execution_result: "response_execution_result"
          validation_criteria: "response_validation_criteria.yaml"
        outputs:
          validation_result: "response_validation_result"
        timeout: 300
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["execute_response_action"]

      - step_id: "notify_response_completion"
        name: "Notify Response Completion"
        description: "Notify stakeholders of response completion"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          validation_result: "response_validation_result"
          notification_config: "response_notification_config.yaml"
        outputs:
          notification_status: "response_notification_status"
        timeout: 60
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 30
        dependencies: ["validate_response_effectiveness"]

  # Predictive Workflows
  predictive_action:
    workflow_id: "predictive_action"
    name: "Predictive Action"
    description: "Execute predictive actions based on AI predictions"
    automation_level: "tactical"
    triggers:
      - type: "event"
        event_type: "prediction"
    steps:
      - step_id: "validate_prediction_confidence"
        name: "Validate Prediction Confidence"
        description: "Validate the confidence level of the prediction"
        type: "service_monitoring"
        automation_level: "tactical"
        inputs:
          prediction: "ai_prediction_data"
          confidence_threshold: "confidence_threshold.yaml"
        outputs:
          confidence_validation: "prediction_confidence_validation"
        timeout: 60
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 30
        dependencies: []

      - step_id: "plan_predictive_action"
        name: "Plan Predictive Action"
        description: "Plan the predictive action to take"
        type: "resource_optimization"
        automation_level: "tactical"
        inputs:
          confidence_validation: "prediction_confidence_validation"
          action_policies: "predictive_action_policies.yaml"
        outputs:
          action_plan: "predictive_action_plan"
        timeout: 300
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 120
        dependencies: ["validate_prediction_confidence"]

      - step_id: "execute_predictive_action"
        name: "Execute Predictive Action"
        description: "Execute the planned predictive action"
        type: "resource_optimization"
        automation_level: "tactical"
        inputs:
          action_plan: "predictive_action_plan"
          execution_config: "predictive_action_execution.yaml"
        outputs:
          execution_result: "predictive_action_execution_result"
        timeout: 900
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 180
        dependencies: ["plan_predictive_action"]

      - step_id: "monitor_action_impact"
        name: "Monitor Action Impact"
        description: "Monitor the impact of the predictive action"
        type: "performance_tuning"
        automation_level: "tactical"
        inputs:
          execution_result: "predictive_action_execution_result"
          monitoring_config: "predictive_action_monitoring.yaml"
        outputs:
          impact_analysis: "predictive_action_impact_analysis"
        timeout: 600
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 60
        dependencies: ["execute_predictive_action"]

  # Security Workflows
  security_response:
    workflow_id: "security_response"
    name: "Security Response"
    description: "Automated security incident response"
    automation_level: "operational"
    triggers:
      - type: "event"
        event_type: "security_vulnerability_detected"
    steps:
      - step_id: "assess_vulnerability_severity"
        name: "Assess Vulnerability Severity"
        description: "Assess the severity of the security vulnerability"
        type: "security_management"
        automation_level: "operational"
        inputs:
          vulnerability: "security_vulnerability_data"
          severity_matrix: "vulnerability_severity_matrix.yaml"
        outputs:
          severity_assessment: "vulnerability_severity_assessment"
        timeout: 120
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 60
        dependencies: []

      - step_id: "identify_affected_services"
        name: "Identify Affected Services"
        description: "Identify services affected by the vulnerability"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          severity_assessment: "vulnerability_severity_assessment"
          service_registry: "service_registry.yaml"
        outputs:
          affected_services: "vulnerability_affected_services"
        timeout: 180
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 90
        dependencies: ["assess_vulnerability_severity"]

      - step_id: "implement_security_patch"
        name: "Implement Security Patch"
        description: "Implement security patch for the vulnerability"
        type: "security_management"
        automation_level: "operational"
        inputs:
          affected_services: "vulnerability_affected_services"
          patch_config: "security_patch_config.yaml"
        outputs:
          patch_result: "security_patch_implementation_result"
        timeout: 1800
        retry_policy:
          max_retries: 3
          backoff: "exponential"
          base_delay: 120
        dependencies: ["identify_affected_services"]

      - step_id: "validate_security_patch"
        name: "Validate Security Patch"
        description: "Validate the effectiveness of the security patch"
        type: "security_management"
        automation_level: "operational"
        inputs:
          patch_result: "security_patch_implementation_result"
          validation_criteria: "security_patch_validation.yaml"
        outputs:
          validation_result: "security_patch_validation_result"
        timeout: 600
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 180
        dependencies: ["implement_security_patch"]

      - step_id: "notify_security_team"
        name: "Notify Security Team"
        description: "Notify security team of patch implementation"
        type: "service_monitoring"
        automation_level: "operational"
        inputs:
          validation_result: "security_patch_validation_result"
          notification_config: "security_notification_config.yaml"
        outputs:
          notification_status: "security_notification_status"
        timeout: 60
        retry_policy:
          max_retries: 2
          backoff: "linear"
          base_delay: 30
        dependencies: ["validate_security_patch"]

# Workflow Configuration
workflow_config:
  # Global settings
  global_settings:
    default_timeout: 300
    default_retry_policy:
      max_retries: 3
      backoff: "exponential"
      base_delay: 60

    # Error handling
    error_handling:
      on_failure: "rollback"
      on_timeout: "retry"
      on_error: "notify_admin"

    # Rollback strategy
    rollback_strategy:
      type: "blue_green"
      preserve_data: true
      notification: true

  # Workflow priorities
  priorities:
    critical: 5
    high: 4
    medium: 3
    low: 2
    background: 1

  # Automation levels
  automation_levels:
    strategic:
      description: "Business strategy and long-term planning"
      execution_frequency: "monthly"
      timeout_multiplier: 2.0

    tactical:
      description: "Resource optimization and performance tuning"
      execution_frequency: "daily"
      timeout_multiplier: 1.5

    operational:
      description: "Service management and deployment"
      execution_frequency: "continuous"
      timeout_multiplier: 1.0

    infrastructure:
      description: "Infrastructure provisioning and configuration"
      execution_frequency: "weekly"
      timeout_multiplier: 1.0
