version: '3.8'

# Development Environment Configuration
# Optimized for fast development cycles and debugging

services:
  postgres:
    image: postgres:16-alpine
    container_name: nexus-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nexus_platform_dev}
      POSTGRES_USER: ${POSTGRES_USER:-nexus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_password}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - nexus-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nexus_user} -d ${POSTGRES_DB:-nexus_platform_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: nexus-redis-dev
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    networks:
      - nexus-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend.multi-stage
      target: development
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.11}
        BUILD_ENV: development
    image: nexus-backend:dev
    container_name: nexus-backend-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nexus_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-nexus_platform_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001,http://localhost:8080
      PYTHONPATH: /app
      # Development specific
      RELOAD: "true"
      DEBUG: "true"
    volumes:
      - ./backend:/app/backend:ro
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
      - backend_dev_logs:/app/logs
      - backend_dev_data:/app/data
    ports:
      - "8000:8000"
    networks:
      - nexus-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend.multi-stage
      target: development
      args:
        NODE_VERSION: ${NODE_VERSION:-18}
        BUILD_ENV: development
    image: nexus-frontend:dev
    container_name: nexus-frontend-dev
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:8000/ws}
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - ./frontend/web:/app:ro
      - /app/node_modules
      - frontend_dev_logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - nexus-dev-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:1.25-alpine
    container_name: nexus-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    networks:
      - nexus-dev-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  nexus-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_logs:
    driver: local
  backend_dev_data:
    driver: local
  frontend_dev_logs:
    driver: local