#!/usr/bin/env node /** * NEXUS Platform - Hub Startup Script * Starts all hub services: connection hub, load balancer, job queue, and performance monitor */ const { spawn } = require('child_process'); const path = require('path'); const fs = require('fs'); class HubManager { constructor() { this.processes = new Map(); this.logs = []; this.isShuttingDown = false; process.on('SIGINT', () => this.shutdown()); process.on('SIGTERM', () => this.shutdown()); } start() { console.log('🚀 Starting NEXUS Platform Agent Hub...\n'); this.startService('agent-connect', 'Agent Connection Hub', 9000); this.startService('load-balancer', 'Load Balancer', 9001); this.startService('job-queue', 'Job Queue Manager', 9002); this.startService('performance-monitor', 'Performance Monitor', 9003); setTimeout(() => { this.showStatus(); this.startHealthCheck(); }, 3000); } startService(scriptName, displayName, port) { const scriptPath = path.join(__dirname, `${scriptName}.js`); if (!fs.existsSync(scriptPath)) { console.log(`❌ Script not found: ${scriptPath}`); return; } console.log(`🔄 Starting ${displayName} on port ${port}...`); const process = spawn('node', [scriptPath], { cwd: __dirname, stdio: ['pipe', 'pipe', 'pipe'] }); process.stdout.on('data', (data) => { const message = data.toString().trim(); if (message) { console.log(`[${displayName}] ${message}`); this.logs.push({ service: displayName, message, timestamp: new Date() }); } }); process.stderr.on('data', (data) => { const message = data.toString().trim(); if (message) { console.error(`[${displayName}] ERROR: ${message}`); this.logs.push({ service: displayName, message: `ERROR: ${message}`, timestamp: new Date() }); } }); process.on('close', (code) => { if (!this.isShuttingDown) { console.log(`❌ ${displayName} exited with code ${code}`); this.logs.push({ service: displayName, message: `Process exited with code ${code}`, timestamp: new Date() }); } }); this.processes.set(scriptName, { process, displayName, port, startTime: new Date() }); } showStatus() { console.log('\n📊 NEXUS Platform Agent Hub Status:'); console.log('====================================='); for (const [name, service] of this.processes) { const uptime = Math.round((new Date() - service.startTime) / 1000); const status = service.process.exitCode === null ? '✅ Running' : '❌ Stopped'; console.log(`${status} ${service.displayName} (port ${service.port}) - ${uptime}s uptime`); } console.log('\n🌐 Hub Endpoints:'); console.log('  • Agent Connection Hub: http: console.log('  • Load Balancer:        http: console.log('  • Job Queue Manager:    http: console.log('  • Performance Monitor:  http: console.log('\n📡 WebSocket Endpoints:'); console.log('  • Agent Hub:     ws: console.log('  • Load Balancer: ws: console.log('  • Job Queue:     ws: console.log('  • Performance:   ws: console.log('\n🔧 Available Commands:'); console.log('  • Health Check: curl http: console.log('  • Agent Status: curl http: console.log('  • Job Queue:    curl http: console.log('  • Dashboard:    curl http: console.log('\n💡 Agent Registration Example:'); console.log('curl -X POST http: console.log('  -H "Content-Type: application/json" \\'); console.log('  -d \'{"agentId": "agent1", "name": "Security Agent", "specialization": ["security"]}\''); console.log('\n🎯 Job Submission Example:'); console.log('curl -X POST http: console.log('  -H "Content-Type: application/json" \\'); console.log('  -d \'{"type": "security_audit", "title": "Security Audit", "priority": "P0"}\''); console.log('\n✨ Hub is ready! All agents can now connect and share workloads.\n'); } startHealthCheck() { setInterval(() => { this.checkServiceHealth(); }, 30000);  } async checkServiceHealth() { const services = [ { name: 'Agent Hub', url: 'http: { name: 'Load Balancer', url: 'http: { name: 'Job Queue', url: 'http: { name: 'Performance Monitor', url: 'http: ]; for (const service of services) { try { const response = await fetch(service.url); if (!response.ok) { console.log(`⚠️  ${service.name} health check failed`); } } catch (error) { console.log(`❌ ${service.name} is not responding`); } } } shutdown() { if (this.isShuttingDown) return; this.isShuttingDown = true; console.log('\n🛑 Shutting down NEXUS Platform Agent Hub...'); for (const [name, service] of this.processes) { console.log(`🔄 Stopping ${service.displayName}...`); service.process.kill('SIGTERM'); } setTimeout(() => { console.log('✅ All services stopped. Goodbye!'); process.exit(0); }, 5000); } } const hubManager = new HubManager(); hubManager.start(); process.stdin.resume();
