#!/usr/bin/env node /** * NEXUS Platform - Hub Test Script * Tests the agent communication hub functionality */ const WebSocket = require('ws'); const fetch = require('node-fetch'); class HubTester { constructor() { this.baseUrl = 'http: this.balancerUrl = 'http: this.queueUrl = 'http: this.monitorUrl = 'http: this.testResults = []; } async runTests() { console.log('🧪 Starting NEXUS Platform Hub Tests...\n'); try { await this.testHealthChecks(); await this.testAgentRegistration(); await this.testJobSubmission(); await this.testWebSocketCommunication(); await this.testLoadBalancing(); await this.testPerformanceMonitoring(); this.showResults(); } catch (error) { console.error('❌ Test failed:', error.message); process.exit(1); } } async testHealthChecks() { console.log('🔍 Testing health checks...'); const services = [ { name: 'Agent Hub', url: `${this.baseUrl}/health` }, { name: 'Load Balancer', url: `${this.balancerUrl}/health` }, { name: 'Job Queue', url: `${this.queueUrl}/health` }, { name: 'Performance Monitor', url: `${this.monitorUrl}/health` } ]; for (const service of services) { try { const response = await fetch(service.url); const data = await response.json(); if (response.ok && data.status === 'healthy') { console.log(`  ✅ ${service.name}: Healthy`); this.testResults.push({ test: 'Health Check', service: service.name, status: 'PASS' }); } else { console.log(`  ❌ ${service.name}: Unhealthy`); this.testResults.push({ test: 'Health Check', service: service.name, status: 'FAIL' }); } } catch (error) { console.log(`  ❌ ${service.name}: Connection failed`); this.testResults.push({ test: 'Health Check', service: service.name, status: 'FAIL' }); } } console.log(''); } async testAgentRegistration() { console.log('👥 Testing agent registration...'); const agents = [ { agentId: 'agent1', name: 'Security Agent', specialization: ['security', 'compliance'] }, { agentId: 'agent3', name: 'Backend Agent', specialization: ['backend', 'apis'] }, { agentId: 'agent4', name: 'Infrastructure Agent', specialization: ['infrastructure', 'deployment'] }, { agentId: 'agent5', name: 'Testing Agent', specialization: ['testing', 'qa'] } ]; for (const agent of agents) { try { const response = await fetch(`${this.baseUrl}/api/v1/agents/register`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ ...agent, capacity: { maxConcurrentTasks: 3 } }) }); if (response.ok) { console.log(`  ✅ ${agent.name} registered successfully`); this.testResults.push({ test: 'Agent Registration', agent: agent.name, status: 'PASS' }); } else { console.log(`  ❌ ${agent.name} registration failed`); this.testResults.push({ test: 'Agent Registration', agent: agent.name, status: 'FAIL' }); } } catch (error) { console.log(`  ❌ ${agent.name} registration error: ${error.message}`); this.testResults.push({ test: 'Agent Registration', agent: agent.name, status: 'FAIL' }); } } console.log(''); } async testJobSubmission() { console.log('📋 Testing job submission...'); const jobs = [ { type: 'security_audit', title: 'Security Audit', priority: 'P0', estimated_duration: 120, required_skills: ['security', 'audit'] }, { type: 'backend_development', title: 'Backend Consolidation', priority: 'P0', estimated_duration: 240, required_skills: ['backend', 'apis'] }, { type: 'infrastructure_setup', title: 'Infrastructure Deployment', priority: 'P0', estimated_duration: 300, required_skills: ['infrastructure', 'deployment'] }, { type: 'test_automation', title: 'Test Automation', priority: 'P1', estimated_duration: 150, required_skills: ['testing', 'automation'] } ]; for (const job of jobs) { try { const response = await fetch(`${this.queueUrl}/api/v1/jobs/submit`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(job) }); if (response.ok) { const data = await response.json(); console.log(`  ✅ ${job.title} submitted (ID: ${data.job_id})`); this.testResults.push({ test: 'Job Submission', job: job.title, status: 'PASS' }); } else { console.log(`  ❌ ${job.title} submission failed`); this.testResults.push({ test: 'Job Submission', job: job.title, status: 'FAIL' }); } } catch (error) { console.log(`  ❌ ${job.title} submission error: ${error.message}`); this.testResults.push({ test: 'Job Submission', job: job.title, status: 'FAIL' }); } } console.log(''); } async testWebSocketCommunication() { console.log('📡 Testing WebSocket communication...'); return new Promise((resolve) => { const ws = new WebSocket('ws: let connected = false; let messageReceived = false; const timeout = setTimeout(() => { if (!connected) { console.log('  ❌ WebSocket connection timeout'); this.testResults.push({ test: 'WebSocket Communication', status: 'FAIL' }); resolve(); } }, 5000); ws.onopen = () => { connected = true; console.log('  ✅ WebSocket connected'); ws.send(JSON.stringify({ type: 'agent_connect', agentId: 'test-agent', name: 'Test Agent', specialization: ['testing'], capacity: { maxConcurrentTasks: 1 } })); }; ws.onmessage = (event) => { const data = JSON.parse(event.data); if (data.type === 'welcome') { messageReceived = true; console.log('  ✅ WebSocket message received'); this.testResults.push({ test: 'WebSocket Communication', status: 'PASS' }); ws.close(); clearTimeout(timeout); resolve(); } }; ws.onerror = (error) => { console.log('  ❌ WebSocket error:', error.message); this.testResults.push({ test: 'WebSocket Communication', status: 'FAIL' }); clearTimeout(timeout); resolve(); }; }); } async testLoadBalancing() { console.log('⚖️ Testing load balancing...'); try { const response = await fetch(`${this.balancerUrl}/api/v1/dashboard`); const data = await response.json(); if (response.ok && data.agents) { console.log(`  ✅ Load balancer dashboard accessible (${data.agents.length} agents)`); this.testResults.push({ test: 'Load Balancing', status: 'PASS' }); } else { console.log('  ❌ Load balancer dashboard failed'); this.testResults.push({ test: 'Load Balancing', status: 'FAIL' }); } } catch (error) { console.log('  ❌ Load balancer test error:', error.message); this.testResults.push({ test: 'Load Balancing', status: 'FAIL' }); } console.log(''); } async testPerformanceMonitoring() { console.log('📊 Testing performance monitoring...'); try { const response = await fetch(`${this.monitorUrl}/api/v1/dashboard`); const data = await response.json(); if (response.ok && data.systemHealth !== undefined) { console.log(`  ✅ Performance monitor accessible (Health: ${data.systemHealth}%)`); this.testResults.push({ test: 'Performance Monitoring', status: 'PASS' }); } else { console.log('  ❌ Performance monitor dashboard failed'); this.testResults.push({ test: 'Performance Monitoring', status: 'FAIL' }); } } catch (error) { console.log('  ❌ Performance monitor test error:', error.message); this.testResults.push({ test: 'Performance Monitoring', status: 'FAIL' }); } console.log(''); } showResults() { console.log('📊 Test Results Summary:'); console.log('========================'); const passed = this.testResults.filter(r => r.status === 'PASS').length; const failed = this.testResults.filter(r => r.status === 'FAIL').length; const total = this.testResults.length; console.log(`Total Tests: ${total}`); console.log(`Passed: ${passed} ✅`); console.log(`Failed: ${failed} ❌`); console.log(`Success Rate: ${Math.round((passed / total) * 100)}%`); if (failed > 0) { console.log('\n❌ Failed Tests:'); this.testResults .filter(r => r.status === 'FAIL') .forEach(r => console.log(`  - ${r.test}: ${r.service || r.agent || r.job || 'Unknown'}`)); } console.log('\n🎉 Hub testing completed!'); if (failed === 0) { console.log('✅ All tests passed! Hub is ready for all 5 agents.'); } else { console.log('⚠️ Some tests failed. Please check the hub configuration.'); } } } const tester = new HubTester(); tester.runTests().catch(console.error);
