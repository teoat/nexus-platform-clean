# NEXUS Platform - Production Kubernetes Manifests
# Comprehensive production deployment with HPA, resource limits, and security

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-production
  labels:
    name: nexus-production
    environment: production
---
# Service Account for Backend
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexus-backend-sa
  namespace: nexus-production
  labels:
    app: nexus-backend
---
# RBAC for Backend Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nexus-backend-role
  namespace: nexus-production
spec:
  rules:
    - apiGroups: [""]
      resources: ["secrets", "configmaps"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nexus-backend-rolebinding
  namespace: nexus-production
spec:
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: nexus-backend-role
  subjects:
    - kind: ServiceAccount
      name: nexus-backend-sa
      namespace: nexus-production
---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nexus-backend-config
  namespace: nexus-production
  labels:
    app: nexus-backend
data:
  NEXUS_MODE: "production"
  LOG_LEVEL: "INFO"
  TZ: "UTC"
  DEBUG: "false"
  HOST: "0.0.0.0"
  PORT: "8000"
  WORKERS: "4"
  SSL_ENABLED: "true"
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
  COMPRESSION_ENABLED: "true"
  COMPRESSION_LEVEL: "6"
  CACHE_ENABLED: "true"
  CACHE_TTL: "300"
  FEATURE_MFA_ENABLED: "true"
  FEATURE_AUDIT_LOGGING: "true"
  FEATURE_RISK_ASSESSMENT: "true"
  FEATURE_COMPLIANCE_MONITORING: "true"
  FEATURE_PERFORMANCE_MONITORING: "true"
---
# Secret for Sensitive Configuration
apiVersion: v1
kind: Secret
metadata:
  name: nexus-backend-secrets
  namespace: nexus-production
  labels:
    app: nexus-backend
type: Opaque
stringData:
  JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
  ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
  BACKUP_ENCRYPTION_KEY: "${BACKUP_ENCRYPTION_KEY}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  REDIS_PASSWORD: "${REDIS_PASSWORD}"
  GRAFANA_PASSWORD: "${GRAFANA_PASSWORD}"
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: nexus-production
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: nexus-production
  labels:
    app: redis
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: nexus-production
  labels:
    app: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: nexus-production
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: nexus-production
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "nexus_platform"
            - name: POSTGRES_USER
              value: "nexus"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nexus-backend-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          resources:
            limits:
              cpu: "1000m"
              memory: "2Gi"
            requests:
              cpu: "500m"
              memory: "1Gi"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - nexus
                - -d
                - nexus_platform
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - nexus
                - -d
                - nexus_platform
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: postgres-init
          configMap:
            name: postgres-init-config
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: nexus-production
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: nexus-production
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 999
        runAsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --requirepass
            - "$(REDIS_PASSWORD)"
            - --maxmemory
            - "512mb"
            - --maxmemory-policy
            - "allkeys-lru"
            - --tcp-keepalive
            - "300"
            - --timeout
            - "300"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nexus-backend-secrets
                  key: REDIS_PASSWORD
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --raw
                - incr
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --raw
                - incr
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: nexus-production
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-production
  labels:
    app: nexus-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nexus-backend
  template:
    metadata:
      labels:
        app: nexus-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nexus-backend-sa
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: nexus-backend
          image: nexus-backend:latest
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 9090
              name: metrics
          envFrom:
            - configMapRef:
                name: nexus-backend-config
            - secretRef:
                name: nexus-backend-secrets
          env:
            - name: DATABASE_URL
              value: "postgresql://nexus:$(POSTGRES_PASSWORD)@postgres:5432/nexus_platform"
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
          resources:
            limits:
              cpu: "1000m"
              memory: "2Gi"
            requests:
              cpu: "500m"
              memory: "1Gi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: logs-volume
              mountPath: /app/logs
            - name: ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: logs-volume
          emptyDir: {}
        - name: ssl-certs
          secret:
            secretName: nexus-ssl-cert
            optional: true
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.35
          command:
            [
              "sh",
              "-c",
              "until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done;",
            ]
        - name: wait-for-redis
          image: busybox:1.35
          command:
            [
              "sh",
              "-c",
              "until nc -z redis 6379; do echo waiting for redis; sleep 2; done;",
            ]
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend
  namespace: nexus-production
  labels:
    app: nexus-backend
spec:
  selector:
    app: nexus-backend
  ports:
    - name: http
      port: 80
      targetPort: 8000
    - name: metrics
      port: 9090
      targetPort: 9090
  type: ClusterIP
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nexus-backend-hpa
  namespace: nexus-production
  labels:
    app: nexus-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nexus-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nexus-backend-pdb
  namespace: nexus-production
  labels:
    app: nexus-backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: nexus-backend
---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nexus-backend-network-policy
  namespace: nexus-production
spec:
  podSelector:
    matchLabels:
      app: nexus-backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app: nginx
      ports:
        - protocol: TCP
          port: 8000
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-backend-ingress
  namespace: nexus-production
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - api.nexus-platform.com
      secretName: nexus-tls
  rules:
    - host: api.nexus-platform.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nexus-backend
                port:
                  number: 80
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: nexus-production
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          ports:
            - containerPort: 9090
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=30d"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
            - "--web.listen-address=0.0.0.0:9090"
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
            requests:
              cpu: "250m"
              memory: "512Mi"
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: nexus-production
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: ClusterIP
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nexus-production
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsUser: 472
        runAsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nexus-backend-secrets
                  key: GRAFANA_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: "true"
            - name: GF_SECURITY_COOKIE_SECURE
              value: "true"
            - name: GF_SECURITY_COOKIE_SAMESITE
              value: "strict"
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: nexus-production
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nexus-backend-monitor
  namespace: nexus-production
  labels:
    app: nexus-backend
spec:
  selector:
    matchLabels:
      app: nexus-backend
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s
---
# ConfigMap for PostgreSQL Init
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
  namespace: nexus-production
data:
  init.sql: |
    -- NEXUS Platform Database Initialization
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

    -- Create database if it doesn't exist
    SELECT 'CREATE DATABASE nexus_platform OWNER nexus'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'nexus_platform')\gexec
---
# ConfigMap for Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: nexus-production
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'nexus-backend'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: nexus-backend
            action: keep
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            regex: "9090"
            action: keep
---
# ConfigMap for Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: nexus-production
data:
  grafana.ini: |
    [server]
    root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/
    serve_from_sub_path = true

    [security]
    admin_user = admin
    admin_password = ${GF_SECURITY_ADMIN_PASSWORD}
    allow_embedding = true
    cookie_secure = true
    cookie_samesite = strict

    [users]
    allow_sign_up = false

    [auth.anonymous]
    enabled = false
