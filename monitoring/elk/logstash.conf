# Logstash configuration for NEXUS Platform log aggregation

input {
  # Filebeat input for application logs
  beats {
    port => 5044
    ssl => false
  }

  # Docker container logs
  docker {
    host => "unix:///var/run/docker.sock"
    exclude_patterns => ["*.gz$", "*.bz2$", "*.tar$", "*.zip$"]
  }

  # System logs
  file {
    path => "/var/log/nexus/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb"
    type => "nexus-application"
  }

  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/nginx_sincedb"
    type => "nginx-access"
  }

  # System syslog
  syslog {
    port => 514
    type => "syslog"
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{/ {
    json {
      source => "message"
      target => "parsed_json"
    }
  }

  # Parse application logs
  if [type] == "nexus-application" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:logger} - %{LOGLEVEL:level} - %{GREEDYDATA:message}"
      }
    }

    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }
  }

  # Parse Nginx access logs
  if [type] == "nginx-access" {
    grok {
      match => {
        "message" => '%{IPORHOST:clientip} - %{DATA:ident} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}" %{NUMBER:request_time}'
      }
    }

    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }

    geoip {
      source => "clientip"
      target => "geoip"
    }

    useragent {
      source => "agent"
      target => "useragent"
    }
  }

  # Add common fields
  mutate {
    add_field => {
      "service" => "nexus-platform"
      "environment" => "%{ENVIRONMENT:-production}"
      "cluster" => "nexus-cluster"
    }
  }

  # Filter out health check logs
  if [request] =~ /\/health/ {
    drop {}
  }

  # Add severity levels
  if [level] == "ERROR" or [level] == "CRITICAL" {
    mutate {
      add_tag => ["error"]
    }
  }

  if [level] == "WARN" or [level] == "WARNING" {
    mutate {
      add_tag => ["warning"]
    }
  }

  # Anonymize sensitive data
  mutate {
    gsub => [
      "message", "%{EMAIL_PRIVATE}", "[EMAIL REDACTED]",
      "message", "%{CREDIT_CARD}", "[CREDIT CARD REDACTED]",
      "message", "%{SSN}", "[SSN REDACTED]"
    ]
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "nexus-%{+YYYY.MM.dd}"
    document_type => "log"

    # Index template
    template => "/usr/share/logstash/config/nexus-template.json"
    template_name => "nexus-logs"
    template_overwrite => true
  }

  # Error logs to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "nexus-errors-%{+YYYY.MM.dd}"
      document_type => "error"
    }
  }

  # Debug output (only in development)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
}
