#!/usr/bin/env node /** * NEXUS Platform - Agent Status Dashboard * Real-time monitoring of all agents and their progress */ const WebSocket = require('ws'); const http = require('http'); class AgentStatusDashboard { constructor() { this.hubUrl = 'ws: this.agents = { agent1: { name: 'Security & Compliance', status: 'disconnected', tasks: 5, completed: 0 }, agent2: { name: 'Frontend & UI/UX', status: 'disconnected', tasks: 2, completed: 0 }, agent3: { name: 'Backend Consolidation', status: 'disconnected', tasks: 4, completed: 0 }, agent4: { name: 'Infrastructure & Deployment', status: 'disconnected', tasks: 3, completed: 0 }, agent5: { name: 'Testing & QA', status: 'disconnected', tasks: 4, completed: 0 } }; this.startTime = new Date(); } start() { console.log('🎯 NEXUS Platform - Agent Status Dashboard'); console.log('=========================================='); console.log(''); console.log('📊 Monitoring all agents for critical task execution...'); console.log('🎯 Target: 95/100 readiness score in 2-3 weeks'); console.log('📊 Current: 78/100 readiness score'); console.log(''); this.connectToHub(); this.startStatusUpdates(); } connectToHub() { try { const ws = new WebSocket(this.hubUrl); ws.on('open', () => { console.log('✅ Connected to communication hub'); this.requestStatus(); }); ws.on('message', (data) => { try { const message = JSON.parse(data); this.handleMessage(message); } catch (error) { console.log('📨 Raw message:', data.toString()); } }); ws.on('error', (error) => { console.error('❌ WebSocket connection error:', error.message); console.log('Please ensure the communication hub is running:'); console.log('node scripts/agent-connect.js'); }); ws.on('close', () => { console.log('🔌 Connection to hub closed'); }); } catch (error) { console.error('❌ Failed to connect to hub:', error.message); } } handleMessage(message) { if (message.type === 'agent_status') { this.updateAgentStatus(message.agentId, message.status, message.progress); } else if (message.type === 'progress_update') { this.updateProgress(message.agentId, message.progress); } else if (message.type === 'task_completed') { this.updateTaskCompletion(message.agentId, message.taskId); } } updateAgentStatus(agentId, status, progress = 0) { if (this.agents[agentId]) { this.agents[agentId].status = status; this.agents[agentId].progress = progress; this.displayStatus(); } } updateProgress(agentId, progress) { if (this.agents[agentId]) { this.agents[agentId].progress = progress; this.displayStatus(); } } updateTaskCompletion(agentId, taskId) { if (this.agents[agentId]) { this.agents[agentId].completed++; this.displayStatus(); } } requestStatus() { Object.keys(this.agents).forEach(agentId => { const message = { type: 'status_request', to: agentId, timestamp: new Date().toISOString() }; }); } displayStatus() { console.clear(); console.log('🎯 NEXUS Platform - Agent Status Dashboard'); console.log('=========================================='); console.log(''); const elapsed = Math.floor((new Date() - this.startTime) / 1000); const minutes = Math.floor(elapsed / 60); const seconds = elapsed % 60; console.log(`⏰ Runtime: ${minutes}m ${seconds}s`); console.log(''); Object.entries(this.agents).forEach(([agentId, agent]) => { const statusIcon = agent.status === 'connected' ? '✅' : '❌'; const progressBar = this.createProgressBar(agent.progress || 0); const completionRate = agent.tasks > 0 ? Math.round((agent.completed / agent.tasks) * 100) : 0; console.log(`${statusIcon} ${agent.name} (${agentId})`); console.log(`   Status: ${agent.status}`); console.log(`   Progress: ${progressBar} ${agent.progress || 0}%`); console.log(`   Tasks: ${agent.completed}/${agent.tasks} completed (${completionRate}%)`); console.log(''); }); const totalTasks = Object.values(this.agents).reduce((sum, agent) => sum + agent.tasks, 0); const totalCompleted = Object.values(this.agents).reduce((sum, agent) => sum + agent.completed, 0); const overallProgress = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0; console.log('📊 OVERALL PROGRESS:'); console.log(`   Tasks Completed: ${totalCompleted}/${totalTasks} (${overallProgress}%)`); console.log(`   Readiness Score: 78/100 → 95/100 (Target)`); console.log(''); if (overallProgress >= 100) { console.log('🎉 ALL CRITICAL TASKS COMPLETED!'); console.log('🚀 Platform ready for launch!'); } else { console.log('🚨 CRITICAL: Agents must continue working!'); console.log('📞 Progress updates required every 4 hours'); } console.log(''); console.log('Press Ctrl+C to stop monitoring...'); } createProgressBar(progress) { const width = 20; const filled = Math.round((progress / 100) * width); const empty = width - filled; return '[' + '█'.repeat(filled) + '░'.repeat(empty) + ']'; } startStatusUpdates() { setInterval(() => { this.displayStatus(); }, 5000); setInterval(() => { this.requestStatus(); }, 30000); } } const dashboard = new AgentStatusDashboard(); dashboard.start(); process.stdin.resume();
