# NEXUS Platform Helm Chart Values

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: nexus
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 2000

# Container security context
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: nexus.local
      paths:
        - path: /
          pathType: Prefix
    - host: api.nexus.local
      paths:
        - path: /
          pathType: Prefix
    - host: monitoring.nexus.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: nexus-tls
      hosts:
        - nexus.local
        - api.nexus.local
        - monitoring.nexus.local

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Backend configuration
backend:
  enabled: true
  replicaCount: 3
  image:
    repository: nexus-backend
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8000
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  env:
    NODE_ENV: "production"
    DATABASE_URL: "postgresql://nexus_user:$(POSTGRES_PASSWORD)@postgres-service:5432/nexus_production"
    REDIS_URL: "redis://redis-service:6379"
    JWT_SECRET_KEY: "nexus_jwt_secret_key_2024_production"
    ENCRYPTION_KEY: "nexus_encryption_key_2024_production_32_chars"

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: nexus-frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  env:
    NODE_ENV: "production"
    REACT_APP_API_URL: "https://api.nexus.local"
    REACT_APP_WS_URL: "wss://api.nexus.local/ws"

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres_password"
    username: "nexus_user"
    password: "nexus_secure_password_2024"
    database: "nexus_production"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis_secure_password_2024"
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Prometheus configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Grafana configuration
grafana:
  enabled: true
  adminPassword: "grafana_admin_password_2024"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# Elasticsearch configuration
elasticsearch:
  enabled: true
  master:
    replicas: 1
    persistence:
      enabled: true
      size: 30Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  data:
    replicas: 1
    persistence:
      enabled: true
      size: 50Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Kibana configuration
kibana:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# Jaeger configuration
jaeger:
  enabled: true
  collector:
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  query:
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"
  s3:
    bucket: "nexus-backups"
    region: "us-east-1"

# Security configuration
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    enabled: true
  rbac:
    enabled: true

# Logging configuration
logging:
  level: "INFO"
  format: "json"
  file:
    enabled: true
    path: "/nexus_backend/logs"
    maxSize: "100MB"
    maxBackups: 5
    maxAge: 30

# Feature flags
features:
  optimization: true
  aiInsights: true
  advancedMonitoring: true
  onDemandFeatures: true
