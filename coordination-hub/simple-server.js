const express = require('express'); const cors = require('cors'); const { createServer } = require('http'); const { Server } = require('socket.io'); const app = express(); const server = createServer(app); const io = new Server(server, { cors: { origin: ["http: methods: ["GET", "POST"] } }); app.use(cors()); app.use(express.json()); const agents = [ { id: 'agent1', name: 'Security & Infrastructure Specialist', role: 'Security Expert, DevOps Engineer, Infrastructure Manager', status: 'active', progress: 90, capabilities: ['security', 'infrastructure', 'devops', 'monitoring', 'compliance'] }, { id: 'agent2', name: 'Frontend Consolidation Expert', role: 'Frontend Developer, UI/UX Specialist, Component Architect', status: 'active', progress: 75, capabilities: ['frontend', 'react', 'typescript', 'ui', 'ux', 'consolidation'] }, { id: 'agent3', name: 'Backend Consolidation Expert', role: 'Backend Developer, API Architect, Microservices Specialist', status: 'active', progress: 100, capabilities: ['backend', 'fastapi', 'python', 'apis', 'microservices', 'consolidation'] }, { id: 'agent4', name: 'Database & API Integration Specialist', role: 'Database Administrator, Integration Specialist, Data Architect', status: 'active', progress: 80, capabilities: ['database', 'postgresql', 'redis', 'integration', 'migration', 'optimization'] }, { id: 'agent5', name: 'Testing & Quality Assurance Expert', role: 'QA Engineer, Test Automation Specialist, Quality Manager', status: 'active', progress: 60, capabilities: ['testing', 'quality', 'automation', 'ci-cd', 'validation', 'documentation'] } ]; const messages = []; let messageId = 1; app.get('/health', (req, res) => { res.json({ status: 'healthy', timestamp: new Date().toISOString(), uptime: process.uptime(), agents: agents.length, connections: io.engine.clientsCount, messages: messages.length }); }); app.post('/auth/login', (req, res) => { const { agentId, password } = req.body; const agent = agents.find(a => a.id === agentId); const expectedPassword = `${agentId}-password-2024`; if (agent && password === expectedPassword) { const token = `token_${agentId}_${Date.now()}`; res.json({ success: true, token, agent }); } else { res.status(401).json({ success: false, error: 'Invalid credentials' }); } }); app.get('/agents', (req, res) => { res.json({ success: true, agents }); }); app.get('/agents/:agentId/status', (req, res) => { const { agentId } = req.params; const agent = agents.find(a => a.id === agentId); if (agent) { res.json({ success: true, agent }); } else { res.status(404).json({ success: false, error: 'Agent not found' }); } }); app.post('/agents/:agentId/progress', (req, res) => { const { agentId } = req.params; const { status, progress, tasks } = req.body; const agent = agents.find(a => a.id === agentId); if (agent) { if (status) agent.status = status; if (progress !== undefined) agent.progress = progress; if (tasks) agent.tasks = tasks; res.json({ success: true, message: 'Progress updated successfully' }); } else { res.status(404).json({ success: false, error: 'Agent not found' }); } }); app.post('/messages', (req, res) => { const { to, message, priority = 'medium', from } = req.body; const newMessage = { id: `msg_${messageId++}`, from, to, content: message, priority, type: 'text', timestamp: new Date().toISOString(), read: false }; messages.push(newMessage); res.json({ success: true, messageId: newMessage.id }); }); app.get('/agents/:agentId/messages', (req, res) => { const { agentId } = req.params; const agentMessages = messages.filter(m => m.to === agentId); res.json({ success: true, messages: agentMessages }); }); app.get('/status', (req, res) => { res.json({ success: true, status: { agents, tasks: [], conflicts: [], qualityGates: [], timestamp: new Date().toISOString() } }); }); io.on('connection', (socket) => { console.log('New WebSocket connection:', socket.id); socket.on('auth', (data) => { const { agentId, token } = data; const agent = agents.find(a => a.id === agentId); if (agent && token) { socket.agentId = agentId; socket.join(`agent_${agentId}`); socket.emit('auth_success', { agentId }); console.log(`Agent ${agentId} authenticated`); } else { socket.emit('auth_error', { error: 'Invalid credentials' }); } }); socket.on('disconnect', () => { console.log('WebSocket disconnected:', socket.id); }); }); app.use((err, req, res, next) => { console.error('Server error:', err); res.status(500).json({ error: 'Internal server error' }); }); const PORT = process.env.PORT || 9000; server.listen(PORT, () => { console.log(`🚀 NEXUS Coordination Hub running on port ${PORT}`); console.log(`🌐 Health check: http: console.log(`📊 API endpoints: http: });
