#!/usr/bin/env node /** * Nexus Coordination Hub - Agent Connection Script * Universal script for all agents to connect to the coordination hub */ const axios = require('axios'); const WebSocket = require('ws'); const readline = require('readline'); class AgentConnector { constructor() { this.hubUrl = process.env.HUB_URL || 'http: this.wsUrl = process.env.WS_URL || 'ws: this.agentId = process.env.AGENT_ID || ''; this.password = process.env.AGENT_PASSWORD || ''; this.token = null; this.ws = null; this.rl = readline.createInterface({ input: process.stdin, output: process.stdout }); } async connect() { console.log('🔌 Connecting to Nexus Coordination Hub...'); console.log(`📍 Hub URL: ${this.hubUrl}`); console.log(`🔌 WebSocket URL: ${this.wsUrl}`); try { await this.authenticate(); await this.connectWebSocket(); await this.startInteractiveMode(); } catch (error) { console.error('❌ Connection failed:', error.message); process.exit(1); } } async authenticate() { if (!this.agentId || !this.password) { console.log('🔐 Please enter your agent credentials:'); this.agentId = await this.question('Agent ID (agent1-agent5): '); this.password = await this.question('Password: '); } try { const response = await axios.post(`${this.hubUrl}/api/coordination/auth/login`, { agentId: this.agentId, password: this.password }); if (response.data.success) { this.token = response.data.token; console.log(`✅ Authenticated as ${this.agentId}`); console.log(`👤 Role: ${response.data.agent.role}`); } else { throw new Error(response.data.error || 'Authentication failed'); } } catch (error) { throw new Error(`Authentication failed: ${error.response?.data?.error || error.message}`); } } async connectWebSocket() { return new Promise((resolve, reject) => { this.ws = new WebSocket(this.wsUrl); this.ws.on('open', () => { console.log('🔌 WebSocket connected'); this.ws.send(JSON.stringify({ agentId: this.agentId, token: this.token })); }); this.ws.on('message', (data) => { try { const message = JSON.parse(data); this.handleWebSocketMessage(message); } catch (error) { console.error('❌ WebSocket message error:', error); } }); this.ws.on('auth_success', () => { console.log('✅ WebSocket authenticated'); resolve(); }); this.ws.on('auth_error', (error) => { console.error('❌ WebSocket authentication failed:', error); reject(new Error('WebSocket authentication failed')); }); this.ws.on('error', (error) => { console.error('❌ WebSocket error:', error); reject(error); }); this.ws.on('close', () => { console.log('🔌 WebSocket disconnected'); }); }); } handleWebSocketMessage(message) { switch (message.type) { case 'progress_update': console.log(`📊 Progress update from ${message.agentId}: ${message.progress.overall}%`); break; case 'message': console.log(`📨 Message from ${message.from}: ${message.content}`); break; case 'blocker_alert': console.log(`🚨 Blocker alert: ${message.description}`); break; case 'daily_standup': console.log('📅 Daily standup reminder'); break; case 'weekly_review': console.log('📊 Weekly review reminder'); break; default: console.log('📨 Received:', message); } } async startInteractiveMode() { console.log('\n🎯 Nexus Coordination Hub - Agent Interface'); console.log('=========================================='); console.log('Available commands:'); console.log('  status          - Show your current status'); console.log('  progress        - Submit progress report'); console.log('  message <agent> - Send message to another agent'); console.log('  dependencies    - Show your dependencies'); console.log('  help            - Show this help'); console.log('  exit            - Disconnect and exit'); console.log('==========================================\n'); while (true) { const command = await this.question(`${this.agentId}> `); await this.executeCommand(command); } } async executeCommand(command) { const [cmd, ...args] = command.trim().split(' '); switch (cmd.toLowerCase()) { case 'status': await this.showStatus(); break; case 'progress': await this.submitProgress(); break; case 'message': if (args.length < 1) { console.log('❌ Usage: message <agentId> <message>'); break; } await this.sendMessage(args[0], args.slice(1).join(' ')); break; case 'dependencies': await this.showDependencies(); break; case 'help': this.showHelp(); break; case 'exit': console.log('👋 Goodbye!'); process.exit(0); break; default: console.log('❌ Unknown command. Type "help" for available commands.'); } } async showStatus() { try { const response = await axios.get(`${this.hubUrl}/api/coordination/agents/${this.agentId}/status`, { headers: { Authorization: `Bearer ${this.token}` } }); if (response.data.success) { const agent = response.data.agent; console.log(`\n📊 Agent Status: ${agent.name}`); console.log(`🎯 Role: ${agent.role}`); console.log(`📈 Progress: ${agent.progress}%`); console.log(`🔄 Status: ${agent.status}`); console.log(`⏰ Last Update: ${agent.lastUpdate}\n`); } } catch (error) { console.error('❌ Failed to get status:', error.message); } } async submitProgress() { console.log('\n📊 Submit Progress Report'); console.log('========================'); const status = await this.question('Status (on-track/ahead/behind/blocked/completed): '); const overall = await this.question('Overall progress (0-100): '); const thisPeriod = await this.question('This period progress (0-100): '); const tasksCompleted = await this.question('Tasks completed: '); const qualityScore = await this.question('Quality score (1-10): '); const completed = await this.question('Completed tasks (comma-separated): '); const inProgress = await this.question('In progress tasks (comma-separated): '); const next = await this.question('Next tasks (comma-separated): '); const criticalBlockers = await this.question('Critical blockers (comma-separated): '); const mediumBlockers = await this.question('Medium blockers (comma-separated): '); const lowBlockers = await this.question('Low blockers (comma-separated): '); const dependencies = await this.question('Dependencies (agent1:need1,agent2:need2): '); const progressData = { agentId: this.agentId, timestamp: new Date().toISOString(), status: status, progress: { overall: parseInt(overall), thisPeriod: parseInt(thisPeriod), tasksCompleted: parseInt(tasksCompleted), qualityScore: parseFloat(qualityScore) }, work: { completed: completed ? completed.split(',').map(s => s.trim()) : [], inProgress: inProgress ? inProgress.split(',').map(s => s.trim()) : [], next: next ? next.split(',').map(s => s.trim()) : [] }, blockers: { critical: criticalBlockers ? criticalBlockers.split(',').map(s => s.trim()) : [], medium: mediumBlockers ? mediumBlockers.split(',').map(s => s.trim()) : [], low: lowBlockers ? lowBlockers.split(',').map(s => s.trim()) : [] }, dependencies: this.parseDependencies(dependencies) }; try { const response = await axios.post(`${this.hubUrl}/api/coordination/agents/${this.agentId}/progress`, progressData, { headers: { Authorization: `Bearer ${this.token}` } }); if (response.data.success) { console.log('✅ Progress report submitted successfully'); } else { console.error('❌ Failed to submit progress:', response.data.error); } } catch (error) { console.error('❌ Failed to submit progress:', error.message); } } parseDependencies(depsString) { const deps = { agent1: [], agent2: [], agent3: [], agent4: [], agent5: [] }; if (depsString) { depsString.split(',').forEach(dep => { const [agent, need] = dep.split(':'); if (agent && need) { const agentId = agent.trim(); if (deps[agentId]) { deps[agentId].push(need.trim()); } } }); } return deps; } async sendMessage(toAgent, message) { if (!message) { message = await this.question('Message: '); } try { const response = await axios.post(`${this.hubUrl}/api/coordination/messages`, { to: toAgent, message: message, priority: 'medium', from: this.agentId }, { headers: { Authorization: `Bearer ${this.token}` } }); if (response.data.success) { console.log(`✅ Message sent to ${toAgent}`); } else { console.error('❌ Failed to send message:', response.data.error); } } catch (error) { console.error('❌ Failed to send message:', error.message); } } async showDependencies() { console.log('\n🔗 Dependencies'); console.log('================'); console.log('agent1 (Security): Database security, Security testing'); console.log('agent2 (Frontend): API contracts, Security auth flow'); console.log('agent3 (Backend): Database schema, Security middleware'); console.log('agent4 (Database): API contracts, Security config'); console.log('agent5 (Testing): Frontend components, Backend APIs\n'); } showHelp() { console.log('\n📚 Available Commands:'); console.log('======================'); console.log('status          - Show your current status'); console.log('progress        - Submit progress report'); console.log('message <agent> - Send message to another agent'); console.log('dependencies    - Show your dependencies'); console.log('help            - Show this help'); console.log('exit            - Disconnect and exit\n'); } question(prompt) { return new Promise((resolve) => { this.rl.question(prompt, resolve); }); } } const connector = new AgentConnector(); connector.connect().catch(console.error);
