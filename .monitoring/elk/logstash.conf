input {
  # Application logs
  tcp {
    port => 5000
    type => "application"
    codec => json_lines
  }

  # System logs
  file {
    path => "/var/log/system.log"
    type => "system"
    start_position => "beginning"
  }

  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    type => "nginx_access"
    start_position => "beginning"
  }

  # Nginx error logs
  file {
    path => "/var/log/nginx/error.log"
    type => "nginx_error"
    start_position => "beginning"
  }
}

filter {
  # Application logs processing
  if [type] == "application" {
    # Parse JSON logs
    json {
      source => "message"
    }

    # Add timestamp
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }

    # Add service metadata
    mutate {
      add_field => {
        "service" => "%{service_name}"
        "environment" => "production"
      }
    }

    # Normalize log levels
    mutate {
      lowercase => ["level"]
    }
  }

  # System logs processing
  if [type] == "system" {
    grok {
      match => {
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}: %{GREEDYDATA:message}"
      }
    }

    date {
      match => ["timestamp", "MMM dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Nginx access logs processing
  if [type] == "nginx_access" {
    grok {
      match => {
        "message" => '%{IPORHOST:client_ip} - %{USERNAME:remote_user} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:user_agent}"'
      }
    }

    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }

    mutate {
      convert => ["status", "integer"]
      convert => ["bytes", "integer"]
    }
  }

  # Nginx error logs processing
  if [type] == "nginx_error" {
    grok {
      match => {
        "message" => '\[%{HTTPDATE:timestamp}\] \[%{LOGLEVEL:level}\] %{NUMBER:pid}#%{NUMBER:tid}: \*{NUMBER:connection_id} %{GREEDYDATA:message}, client: %{IPORHOST:client_ip}, server: %{IPORHOST:server}, request: "%{DATA:request}", host: "%{DATA:host}"'
      }
    }

    date {
      match => ["timestamp", "yyyy/MM/dd HH:mm:ss"]
      target => "@timestamp"
    }

    mutate {
      lowercase => ["level"]
    }
  }
}

output {
  # Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "nexus-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"
  }

  # Stdout for debugging (development only)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
}